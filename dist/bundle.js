!function(e){function t(e){delete installedChunks[e]}function n(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.type="text/javascript",n.charset="utf-8",n.src=f.p+""+e+"."+k+".hot-update.js",t.appendChild(n)}function r(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=f.p+""+k+".hot-update.json";r.open("GET",o,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}function o(e){var t=S[e];if(!t)return f;var n=function(n){return t.hot.active?(S[n]?S[n].parents.indexOf(e)<0&&S[n].parents.push(e):(H=[e],h=n),t.children.indexOf(n)<0&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),H=[]),f(n)};for(var r in f)Object.prototype.hasOwnProperty.call(f,r)&&"e"!==r&&Object.defineProperty(n,r,function(e){return{configurable:!0,enumerable:!0,get:function(){return f[e]},set:function(t){f[e]=t}}}(r));return n.e=function(e){function t(){O--,"prepare"===C&&(P[e]||p(e),0===O&&0===L&&l())}return"ready"===C&&i("prepare"),O++,f.e(e).then(t,function(e){throw t(),e})},n}function a(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:h!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:s,apply:u,status:function(e){if(!e)return C;E.push(e)},addStatusHandler:function(e){E.push(e)},removeStatusHandler:function(e){var t=E.indexOf(e);t>=0&&E.splice(t,1)},data:D[e]};return h=void 0,t}function i(e){C=e;for(var t=0;t<E.length;t++)E[t].call(null,e)}function c(e){return+e+""===e?+e:e}function s(e){if("idle"!==C)throw new Error("check() is only allowed in idle status");return w=e,i("check"),r(b).then(function(e){if(!e)return i("idle"),null;M={},P={},x=e.c,g=e.h,i("prepare");var t=new Promise(function(e,t){y={resolve:e,reject:t}});v={};return p(0),"prepare"===C&&0===O&&0===L&&l(),t})}function d(e,t){if(x[e]&&M[e]){M[e]=!1;for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(v[n]=t[n]);0==--L&&0===O&&l()}}function p(e){x[e]?(M[e]=!0,L++,n(e)):P[e]=!0}function l(){i("ready");var e=y;if(y=null,e)if(w)Promise.resolve().then(function(){return u(w)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in v)Object.prototype.hasOwnProperty.call(v,n)&&t.push(c(n));e.resolve(t)}}function u(n){function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];e.indexOf(r)<0&&e.push(r)}}if("ready"!==C)throw new Error("apply() is only allowed in ready status");n=n||{};var o,a,s,d,p,l={},u=[],m={},h=function(){console.warn("[HMR] unexpected require("+w.moduleId+") to disposed module")};for(var y in v)if(Object.prototype.hasOwnProperty.call(v,y)){p=c(y);var w;w=v[y]?function(e){for(var t=[e],n={},o=t.slice().map(function(e){return{chain:[e],id:e}});o.length>0;){var a=o.pop(),i=a.id,c=a.chain;if((d=S[i])&&!d.hot._selfAccepted){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var s=0;s<d.parents.length;s++){var p=d.parents[s],l=S[p];if(l){if(l.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([p]),moduleId:i,parentId:p};t.indexOf(p)>=0||(l.hot._acceptedDependencies[i]?(n[p]||(n[p]=[]),r(n[p],[i])):(delete n[p],t.push(p),o.push({chain:c.concat([p]),id:p})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}(p):{type:"disposed",moduleId:y};var b=!1,T=!1,E=!1,L="";switch(w.chain&&(L="\nUpdate propagation: "+w.chain.join(" -> ")),w.type){case"self-declined":n.onDeclined&&n.onDeclined(w),n.ignoreDeclined||(b=new Error("Aborted because of self decline: "+w.moduleId+L));break;case"declined":n.onDeclined&&n.onDeclined(w),n.ignoreDeclined||(b=new Error("Aborted because of declined dependency: "+w.moduleId+" in "+w.parentId+L));break;case"unaccepted":n.onUnaccepted&&n.onUnaccepted(w),n.ignoreUnaccepted||(b=new Error("Aborted because "+p+" is not accepted"+L));break;case"accepted":n.onAccepted&&n.onAccepted(w),T=!0;break;case"disposed":n.onDisposed&&n.onDisposed(w),E=!0;break;default:throw new Error("Unexception type "+w.type)}if(b)return i("abort"),Promise.reject(b);if(T){m[p]=v[p],r(u,w.outdatedModules);for(p in w.outdatedDependencies)Object.prototype.hasOwnProperty.call(w.outdatedDependencies,p)&&(l[p]||(l[p]=[]),r(l[p],w.outdatedDependencies[p]))}E&&(r(u,[w.moduleId]),m[p]=h)}var O=[];for(a=0;a<u.length;a++)p=u[a],S[p]&&S[p].hot._selfAccepted&&O.push({module:p,errorHandler:S[p].hot._selfAccepted});i("dispose"),Object.keys(x).forEach(function(e){!1===x[e]&&t(e)});for(var P,M=u.slice();M.length>0;)if(p=M.pop(),d=S[p]){var _={},A=d.hot._disposeHandlers;for(s=0;s<A.length;s++)(o=A[s])(_);for(D[p]=_,d.hot.active=!1,delete S[p],delete l[p],s=0;s<d.children.length;s++){var U=S[d.children[s]];U&&((P=U.parents.indexOf(p))>=0&&U.parents.splice(P,1))}}var I,j;for(p in l)if(Object.prototype.hasOwnProperty.call(l,p)&&(d=S[p]))for(j=l[p],s=0;s<j.length;s++)I=j[s],(P=d.children.indexOf(I))>=0&&d.children.splice(P,1);i("apply"),k=g;for(p in m)Object.prototype.hasOwnProperty.call(m,p)&&(e[p]=m[p]);var F=null;for(p in l)if(Object.prototype.hasOwnProperty.call(l,p)&&(d=S[p])){j=l[p];var N=[];for(a=0;a<j.length;a++)if(I=j[a],o=d.hot._acceptedDependencies[I]){if(N.indexOf(o)>=0)continue;N.push(o)}for(a=0;a<N.length;a++){o=N[a];try{o(j)}catch(e){n.onErrored&&n.onErrored({type:"accept-errored",moduleId:p,dependencyId:j[a],error:e}),n.ignoreErrored||F||(F=e)}}}for(a=0;a<O.length;a++){var R=O[a];p=R.module,H=[p];try{f(p)}catch(e){if("function"==typeof R.errorHandler)try{R.errorHandler(e)}catch(t){n.onErrored&&n.onErrored({type:"self-accept-error-handler-errored",moduleId:p,error:t,orginalError:e,originalError:e}),n.ignoreErrored||F||(F=t),F||(F=e)}else n.onErrored&&n.onErrored({type:"self-accept-errored",moduleId:p,error:e}),n.ignoreErrored||F||(F=e)}}return F?(i("fail"),Promise.reject(F)):(i("idle"),new Promise(function(e){e(u)}))}function f(t){if(S[t])return S[t].exports;var n=S[t]={i:t,l:!1,exports:{},hot:a(t),parents:(T=H,H=[],T),children:[]};return e[t].call(n.exports,n,n.exports,o(t)),n.l=!0,n.exports}var m=this.webpackHotUpdate;this.webpackHotUpdate=function(e,t){d(e,t),m&&m(e,t)};var h,y,v,g,w=!0,k="264a72299223ea7b1004",b=1e4,D={},H=[],T=[],E=[],C="idle",L=0,O=0,P={},M={},x={},S={};f.m=e,f.c=S,f.d=function(e,t,n){f.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:n})},f.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return f.d(t,"a",t),t},f.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},f.p="",f.h=function(){return k},o(0)(f.s=0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n.d(t,"Application",function(){return o});var r=n(2),o=function(){function e(){var e=new r.a;document.getElementById("app").appendChild(e.start())}return e}();window.onload=function(){new o}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var r=n(3),o=n(4),a=n(5),i=function(){function e(){var e=this;this.element=document.createElement("div"),this.elmAppTitle=document.createElement("h1"),this.bAppLoaded=!1,this.onConnectionOpen=function(e){console.log("Connection established successfully")},this.onConnectionMessage=function(t){var n=e;n.showApplication(),n.oStockTable||(n.oStockTable=new a.a,n.element.appendChild(n.oStockTable.element)),n.oStockTable.setData(t.data)},this.onConnectionClose=function(e){console.log("Connection closed successfully")},this.onConnectionError=function(e){alert("Problem connecting to server")};var t=this;t.element.style.display="none",t.render()}return e.prototype.render=function(){var e=this;e.elmAppTitle.className="app-title",e.elmAppTitle.innerText="(Live) Stocks App",e.element.appendChild(e.elmAppTitle)},e.prototype.start=function(){var e=this;return e.setData(),e.element},e.prototype.setData=function(){var e=this;r.a.getInstance().create(o.a),r.a.getInstance().registerEvents({onConnectionOpen:e.onConnectionOpen,onConnectionMessage:e.onConnectionMessage,onConnectionClose:e.onConnectionClose,onConnectionError:e.onConnectionError})},e.prototype.showApplication=function(){var e=this;e.bAppLoaded||(e.element.style.display="",e.bAppLoaded=!0,document.getElementById("app-loader").style.display="none")},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(){}return e.getInstance=function(){return e.instance||(e.instance=new e),e.instance},e.prototype.create=function(e){var t=this;return t.oWebSocket=new WebSocket(e),t.oWebSocket},e.prototype.registerEvents=function(e){var t=this;e.onConnectionOpen&&(t.oWebSocket.onopen=e.onConnectionOpen),e.onConnectionMessage&&(t.oWebSocket.onmessage=e.onConnectionMessage),e.onConnectionClose&&(t.oWebSocket.onclose=e.onConnectionClose),e.onConnectionError&&(t.oWebSocket.onerror=e.onConnectionError)},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r="ws://stocks.mnet.website"},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var r=n(6),o=n(7),a=function(){function e(){this.stockMap=new Array,this.stockRow=new Array,this.element=document.createElement("div"),this.elmHeader=document.createElement("div"),this.elmHeaderName=document.createElement("span"),this.elmHeaderPrice=document.createElement("span"),this.elmHeaderLastUpdate=document.createElement("span");var e=this;e.element.className="stock-table",e.element.appendChild(e.createTableHeader())}return e.prototype.createTableHeader=function(){var e=this,t=document.createElement("div");return t.className="stock-row-header",e.elmHeaderName.innerText="Ticker",e.elmHeaderPrice.innerText="Price",e.elmHeaderLastUpdate.innerText="Last Update",e.elmHeaderName.className="stock-ticker",e.elmHeaderPrice.className="stock-price",e.elmHeaderLastUpdate.className="stock-last-update",t.appendChild(e.elmHeaderName),t.appendChild(e.elmHeaderPrice),t.appendChild(e.elmHeaderLastUpdate),t},e.prototype.setData=function(e){var t=this;JSON.parse(e).forEach(function(e,n){console.log(e[0]+e[1]);var o=t.stockMap.filter(function(t){return t.name==e[0]});0==o.length?t.stockMap.push(new r.a(e[0],e[1])):1==o.length&&(o[0].price=e[1])});for(var n=0;n<t.stockMap.length;n++){for(var a=!1,i=0;i<t.stockRow.length;i++)if(t.stockMap[n].name==t.stockRow[i].name){a=!0,t.stockRow[i].updateData(t.stockMap[n].name,t.stockMap[n].price);break}a||(t.stockRow.push(new o.a(t.stockMap[n].name,t.stockMap[n].price)),t.element.appendChild(t.stockRow[t.stockRow.length-1].element))}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e,t){var n=this;n.name=e,n.price=t}return e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var r=function(){function e(e,t){this.element=document.createElement("div"),this.elmName=document.createElement("span"),this.elmPrice=document.createElement("span"),this.elmLastUpdate=document.createElement("span"),this.lstHistory=new Array;var n=this;n.name=e,n.price=t,n.updateTime=new Date,n.addElements(),n.setHistory(n.price,n.updateTime),n.renderStockData(n.name,n.price,n.getLastUpdatedTime()),n.watchLastUpdate()}return e.prototype.addElements=function(){var e=this;e.element.className="stock-row",e.elmName.className="stock-name",e.elmPrice.className="stock-price",e.elmLastUpdate.className="stock-last-update",e.element.appendChild(e.elmName),e.element.appendChild(e.elmPrice),e.element.appendChild(e.elmLastUpdate)},e.prototype.watchLastUpdate=function(){var e=this;e.lastUpdateTimer=window.setInterval(function(){var t=e.getLastUpdatedTime(),n=parseInt((parseInt(t)/1e3).toFixed(0));n/60<1?e.elmLastUpdate.innerHTML="A few Seconds Ago":n/3600<1?e.elmLastUpdate.innerHTML=parseInt((n/60).toFixed(0))+" minutes ago":n/216e3<1&&(e.isDateToday(e.updateTime)?e.elmLastUpdate.innerHTML=e.getTimeFromDate(e.updateTime,!0):e.elmLastUpdate.innerHTML=e.getDayMonthFromDate(e.updateTime)+" "+e.getTimeFromDate(e.updateTime,!0))},6e4)},e.prototype.isDateToday=function(e){return(new Date).getFullYear()==e.getFullYear()&&(new Date).getMonth()==e.getMonth()&&(new Date).getDay()==e.getDay()},e.prototype.getTimeFromDate=function(e,t){return t?e.toLocaleTimeString().split(":")[0]+":"+e.toLocaleTimeString().split(":")[1]+" "+e.toLocaleTimeString().split(":")[2].split(" ")[1]:e.toTimeString().split(":")[0]+":"+e.toTimeString().split(":")[1]},e.prototype.getDayMonthFromDate=function(e){return e.toDateString().split(" ")[2]+" "+e.toDateString().split(" ")[1]},e.prototype.updateData=function(e,t){var n=this;n.updateTime=new Date,n.price=t,n.renderStockData(e,t,n.getLastUpdatedTime()),n.setHistory(n.price,n.updateTime),n.previousPrice=n.price},e.prototype.renderStockData=function(e,t,n){var r=this;r.elmName.innerHTML=e,r.elmPrice.innerHTML=parseFloat(t).toFixed(2),parseInt(n)<60&&(r.elmLastUpdate.innerHTML="A few Seconds Ago"),r.previousPrice&&(parseFloat(t).toFixed(2)!=parseFloat(r.previousPrice).toFixed(2)&&(r.elmPrice.classList.remove("stock-price-increase"),r.elmPrice.classList.remove("stock-price-decrease")),parseFloat(t).toFixed(2)>parseFloat(r.previousPrice).toFixed(2)?r.elmPrice.classList.add("stock-price-increase"):parseFloat(t).toFixed(2)<parseFloat(r.previousPrice).toFixed(2)&&r.elmPrice.classList.add("stock-price-decrease"))},e.prototype.setHistory=function(e,t){var n=this;(!n.lstHistory[n.lstHistory.length-1]||n.lstHistory[n.lstHistory.length-1]&&n.lstHistory[n.lstHistory.length-1][0]!=n.price)&&n.lstHistory.push([n.price,n.updateTime])},e.prototype.getLastUpdatedTime=function(){var e=this;return((new Date).getTime()-e.lstHistory[e.lstHistory.length-1][1].getTime()).toString()},e}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYnVuZGxlLmpzIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCAyNjRhNzIyOTkyMjNlYTdiMTAwNCIsIndlYnBhY2s6Ly8vLi9hcHAvYXBwLnRzIiwid2VicGFjazovLy8uL2FwcC9lbmdpbmUvZW5naW5lLnRzIiwid2VicGFjazovLy8uL2FwcC93ZWJzb2NrZXRoZWxwZXIvd2Vic29ja2V0aGVscGVyLnRzIiwid2VicGFjazovLy8uL2FwcC9jb25zdGFudHMvY29uc3RhbnRzLnRzIiwid2VicGFjazovLy8uL2FwcC9zdG9ja3RhYmxlL3N0b2NrdGFibGUudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0b2NrdGFibGUvc3RvY2ttYXAudHMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3N0b2Nrcm93L3N0b2Nrcm93LnRzIl0sIm5hbWVzIjpbIm1vZHVsZXMiLCJob3REaXNwb3NlQ2h1bmsiLCJjaHVua0lkIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImhlYWQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJjaGFyc2V0Iiwic3JjIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInAiLCJob3RDdXJyZW50SGFzaCIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRNYW5pZmVzdCIsInJlcXVlc3RUaW1lb3V0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJYTUxIdHRwUmVxdWVzdCIsIkVycm9yIiwicmVxdWVzdCIsInJlcXVlc3RQYXRoIiwib3BlbiIsInRpbWVvdXQiLCJzZW5kIiwiZXJyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInN0YXR1cyIsInVwZGF0ZSIsIkpTT04iLCJwYXJzZSIsInJlc3BvbnNlVGV4dCIsImUiLCJob3RDcmVhdGVSZXF1aXJlIiwibW9kdWxlSWQiLCJtZSIsImluc3RhbGxlZE1vZHVsZXMiLCJmbiIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImhvdEN1cnJlbnRQYXJlbnRzIiwiaG90Q3VycmVudENoaWxkTW9kdWxlIiwiY2hpbGRyZW4iLCJjb25zb2xlIiwid2FybiIsIm5hbWUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImZpbmlzaENodW5rTG9hZGluZyIsImhvdENodW5rc0xvYWRpbmciLCJob3RTdGF0dXMiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsImhvdFdhaXRpbmdGaWxlcyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RTZXRTdGF0dXMiLCJ0aGVuIiwiaG90Q3JlYXRlTW9kdWxlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfZGlzcG9zZUhhbmRsZXJzIiwiX21haW4iLCJhY2NlcHQiLCJkZXAiLCJjYWxsYmFjayIsImkiLCJsZW5ndGgiLCJkZWNsaW5lIiwiZGlzcG9zZSIsImFkZERpc3Bvc2VIYW5kbGVyIiwicmVtb3ZlRGlzcG9zZUhhbmRsZXIiLCJpZHgiLCJzcGxpY2UiLCJjaGVjayIsImhvdENoZWNrIiwiYXBwbHkiLCJob3RBcHBseSIsImwiLCJob3RTdGF0dXNIYW5kbGVycyIsImFkZFN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwiZGF0YSIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwidW5kZWZpbmVkIiwibmV3U3RhdHVzIiwidG9Nb2R1bGVJZCIsImlkIiwiaG90QXBwbHlPblVwZGF0ZSIsImhvdFJlcXVlc3RUaW1lb3V0IiwiaG90UmVxdWVzdGVkRmlsZXNNYXAiLCJob3RBdmFpbGFibGVGaWxlc01hcCIsImMiLCJob3RVcGRhdGVOZXdIYXNoIiwiaCIsInByb21pc2UiLCJob3REZWZlcnJlZCIsImhvdFVwZGF0ZSIsImhvdEFkZFVwZGF0ZUNodW5rIiwibW9yZU1vZHVsZXMiLCJkZWZlcnJlZCIsInJlc3VsdCIsIm91dGRhdGVkTW9kdWxlcyIsIm9wdGlvbnMiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiaXRlbSIsImNiIiwiaiIsIm1vZHVsZSIsIm91dGRhdGVkRGVwZW5kZW5jaWVzIiwiYXBwbGllZFVwZGF0ZSIsIndhcm5VbmV4cGVjdGVkUmVxdWlyZSIsInVwZGF0ZU1vZHVsZUlkIiwicXVldWUiLCJzbGljZSIsIm1hcCIsImNoYWluIiwicXVldWVJdGVtIiwicG9wIiwicGFyZW50SWQiLCJwYXJlbnQiLCJjb25jYXQiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJlcnJvckhhbmRsZXIiLCJrZXlzIiwiZm9yRWFjaCIsImRpc3Bvc2VIYW5kbGVycyIsImNoaWxkIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZXJyb3IiLCJjYWxsYmFja3MiLCJvbkVycm9yZWQiLCJkZXBlbmRlbmN5SWQiLCJpZ25vcmVFcnJvcmVkIiwiZXJyMiIsIm9yZ2luYWxFcnJvciIsIm9yaWdpbmFsRXJyb3IiLCJleHBvcnRzIiwiaG90Q3VycmVudFBhcmVudHNUZW1wIiwicGFyZW50SG90VXBkYXRlQ2FsbGJhY2siLCJ0aGlzIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJfX3dlYnBhY2tfZXhwb3J0c19fIiwiQXBwbGljYXRpb24iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2VuZ2luZV9lbmdpbmVfXyIsIm9FbmdpbmUiLCJnZXRFbGVtZW50QnlJZCIsInN0YXJ0Iiwid2luZG93Iiwib25sb2FkIiwiRW5naW5lIiwiX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX193ZWJzb2NrZXRoZWxwZXJfd2Vic29ja2V0aGVscGVyX18iLCJfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2NvbnN0YW50c19jb25zdGFudHNfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fc3RvY2t0YWJsZV9zdG9ja3RhYmxlX18iLCJfdGhpcyIsImVsZW1lbnQiLCJlbG1BcHBUaXRsZSIsImJBcHBMb2FkZWQiLCJvbkNvbm5lY3Rpb25PcGVuIiwiZXZlbnQiLCJsb2ciLCJvbkNvbm5lY3Rpb25NZXNzYWdlIiwic2hvd0FwcGxpY2F0aW9uIiwib1N0b2NrVGFibGUiLCJzZXREYXRhIiwib25Db25uZWN0aW9uQ2xvc2UiLCJvbkNvbm5lY3Rpb25FcnJvciIsImFsZXJ0Iiwic3R5bGUiLCJkaXNwbGF5IiwicmVuZGVyIiwiY2xhc3NOYW1lIiwiaW5uZXJUZXh0IiwiZ2V0SW5zdGFuY2UiLCJjcmVhdGUiLCJyZWdpc3RlckV2ZW50cyIsIldlYlNvY2tldEhlbHBlciIsImluc3RhbmNlIiwidXJsIiwib1dlYlNvY2tldEhlbHBlciIsIm9XZWJTb2NrZXQiLCJXZWJTb2NrZXQiLCJvbm9wZW4iLCJvbm1lc3NhZ2UiLCJvbmNsb3NlIiwib25lcnJvciIsIkhPU1RfVVJMIiwiU3RvY2tUYWJsZSIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fc3RvY2ttYXBfXyIsIl9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMV9fc3RvY2tyb3dfc3RvY2tyb3dfXyIsInN0b2NrTWFwIiwiQXJyYXkiLCJzdG9ja1JvdyIsImVsbUhlYWRlciIsImVsbUhlYWRlck5hbWUiLCJlbG1IZWFkZXJQcmljZSIsImVsbUhlYWRlckxhc3RVcGRhdGUiLCJjcmVhdGVUYWJsZUhlYWRlciIsInN0b2NrUmF0ZSIsImluZGV4Iiwib0N1clN0b2NrIiwiZmlsdGVyIiwic3RvY2siLCJwcmljZSIsImJGb3VuZCIsInVwZGF0ZURhdGEiLCJTdG9ja01hcCIsInN0ck5hbWUiLCJzdHJQcmljZSIsIm9TdG9ja01hcCIsIlN0b2NrUm93IiwiZWxtTmFtZSIsImVsbVByaWNlIiwiZWxtTGFzdFVwZGF0ZSIsImxzdEhpc3RvcnkiLCJvU3RvY2tSb3ciLCJ1cGRhdGVUaW1lIiwiRGF0ZSIsImFkZEVsZW1lbnRzIiwic2V0SGlzdG9yeSIsInJlbmRlclN0b2NrRGF0YSIsImdldExhc3RVcGRhdGVkVGltZSIsIndhdGNoTGFzdFVwZGF0ZSIsImxhc3RVcGRhdGVUaW1lciIsInNldEludGVydmFsIiwidGltZURpZmYiLCJ0aW1lIiwicGFyc2VJbnQiLCJ0b0ZpeGVkIiwiaW5uZXJIVE1MIiwiaXNEYXRlVG9kYXkiLCJnZXRUaW1lRnJvbURhdGUiLCJnZXREYXlNb250aEZyb21EYXRlIiwib0RhdGUiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0RGF5IiwiYklzMTJociIsInRvTG9jYWxlVGltZVN0cmluZyIsInNwbGl0IiwidG9UaW1lU3RyaW5nIiwidG9EYXRlU3RyaW5nIiwicHJldmlvdXNQcmljZSIsInN0ckxhc3RVcGRhdGVkVGltZSIsInBhcnNlRmxvYXQiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJhZGQiLCJzdHJUaW1lIiwiZ2V0VGltZSIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiQ0FBUyxTQUFVQSxHQ0FuQixRQUFBQyxHQUFBQyxTQUNBQyxpQkFBQUQsR0FTQSxRQUFBRSxHQUFBRixHQUNBLEdBQUFHLEdBQUFDLFNBQUFDLHFCQUFBLFdBQ0FDLEVBQUFGLFNBQUFHLGNBQUEsU0FDQUQsR0FBQUUsS0FBQSxrQkFDQUYsRUFBQUcsUUFBQSxRQUNBSCxFQUFBSSxJQUFBQyxFQUFBQyxFQUFBLEdBQUFaLEVBQUEsSUFBQWEsRUFBQSxpQkFFQVYsRUFBQVcsWUFBQVIsR0FHQSxR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QUFBLEtBQ0FiLEVBQUFILFNBQUFpQyxVQUFBQyxPQUFBLHdCQUNBL0IsRUFBQUgsU0FBQWlDLFVBQUFDLE9BQUEseUJBRUFGLFdBQUFwQyxHQUFBb0IsUUFBQSxHQUFBZ0IsV0FBQTdCLEVBQUEyQixlQUFBZCxRQUFBLEdBQ0FiLEVBQUFILFNBQUFpQyxVQUFBRSxJQUFBLHdCQUVBSCxXQUFBcEMsR0FBQW9CLFFBQUEsR0FBQWdCLFdBQUE3QixFQUFBMkIsZUFBQWQsUUFBQSxJQUNBYixFQUFBSCxTQUFBaUMsVUFBQUUsSUFBQSwwQkFLQXJDLEVBQUFsTSxVQUFBMk0sV0FBQSxTQUFBWCxFQUFBd0MsR0FDQSxHQUFBakMsR0FBQW5GLE9BQ0FtRixFQUFBRCxXQUFBQyxFQUFBRCxXQUFBekssT0FBQSxJQUNBMEssRUFBQUQsV0FBQUMsRUFBQUQsV0FBQXpLLE9BQUEsSUFDQTBLLEVBQUFELFdBQUFDLEVBQUFELFdBQUF6SyxPQUFBLE9BQUEwSyxFQUFBWixRQUNBWSxFQUFBRCxXQUFBOU0sTUFBQStNLEVBQUFaLE1BQUFZLEVBQUFDLGNBR0FOLEVBQUFsTSxVQUFBNk0sbUJBQUEsV0FDQSxHQUFBTixHQUFBbkYsSUFFQSxTQURBLEdBQUFxRixPQUFBZ0MsVUFBQWxDLEVBQUFELFdBQUFDLEVBQUFELFdBQUF6SyxPQUFBLE1BQUE0TSxXQUNBQyxZQUVBeEMiLCJmaWxlIjoiYnVuZGxlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuLyoqKioqKi8gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4vKioqKioqLyBcdH1cbi8qKioqKiovIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gdGhpc1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4vKioqKioqLyBcdHRoaXNbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdID0gXHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcclxuLyoqKioqKi8gXHRcdGlmKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XHJcbi8qKioqKiovIFx0fSA7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG4vKioqKioqLyBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XHJcbi8qKioqKiovIFx0XHRzY3JpcHQudHlwZSA9IFwidGV4dC9qYXZhc2NyaXB0XCI7XHJcbi8qKioqKiovIFx0XHRzY3JpcHQuY2hhcnNldCA9IFwidXRmLThcIjtcclxuLyoqKioqKi8gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XHJcbi8qKioqKiovIFx0XHQ7XHJcbi8qKioqKiovIFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcclxuLyoqKioqKi8gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuLyoqKioqKi8gXHRcdFx0aWYodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKVxyXG4vKioqKioqLyBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcclxuLyoqKioqKi8gXHRcdFx0dHJ5IHtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xyXG4vKioqKioqLyBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XHJcbi8qKioqKiovIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XHJcbi8qKioqKiovIFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xyXG4vKioqKioqLyBcdFx0XHR9IGNhdGNoKGVycikge1xyXG4vKioqKioqLyBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRyZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHQvLyB0aW1lb3V0XHJcbi8qKioqKiovIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKSk7XHJcbi8qKioqKiovIFx0XHRcdFx0fSBlbHNlIGlmKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdC8vIG5vIHVwZGF0ZSBhdmFpbGFibGVcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJlc29sdmUoKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2UgaWYocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXHJcbi8qKioqKiovIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XHJcbi8qKioqKiovIFx0XHRcdFx0fSBlbHNlIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcclxuLyoqKioqKi8gXHRcdFx0XHRcdHRyeSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH0gY2F0Y2goZSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdHJldHVybjtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH07XHJcbi8qKioqKiovIFx0XHR9KTtcclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdHZhciBob3RBcHBseU9uVXBkYXRlID0gdHJ1ZTtcclxuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcIjI2NGE3MjI5OTIyM2VhN2IxMDA0XCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcclxuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudE1vZHVsZURhdGEgPSB7fTtcclxuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbi8qKioqKiovIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHR2YXIgaG90Q3VycmVudFBhcmVudHNUZW1wID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuLyoqKioqKi8gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0aWYoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcclxuLyoqKioqKi8gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcclxuLyoqKioqKi8gXHRcdFx0aWYobWUuaG90LmFjdGl2ZSkge1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA8IDApXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gcmVxdWVzdDtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0aWYobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA8IDApXHJcbi8qKioqKiovIFx0XHRcdFx0XHRtZS5jaGlsZHJlbi5wdXNoKHJlcXVlc3QpO1xyXG4vKioqKioqLyBcdFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHRcdGNvbnNvbGUud2FybihcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlcXVlc3QgKyBcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgKyBtb2R1bGVJZCk7XHJcbi8qKioqKiovIFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbXTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcclxuLyoqKioqKi8gXHRcdH07XHJcbi8qKioqKiovIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xyXG4vKioqKioqLyBcdFx0XHRyZXR1cm4ge1xyXG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG4vKioqKioqLyBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXTtcclxuLyoqKioqKi8gXHRcdFx0XHR9LFxyXG4vKioqKioqLyBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX19bbmFtZV0gPSB2YWx1ZTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH07XHJcbi8qKioqKiovIFx0XHR9O1xyXG4vKioqKioqLyBcdFx0Zm9yKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuLyoqKioqKi8gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCBuYW1lLCBPYmplY3RGYWN0b3J5KG5hbWUpKTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFx0Zm4uZSA9IGZ1bmN0aW9uKGNodW5rSWQpIHtcclxuLyoqKioqKi8gXHRcdFx0aWYoaG90U3RhdHVzID09PSBcInJlYWR5XCIpXHJcbi8qKioqKiovIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcclxuLyoqKioqKi8gXHRcdFx0aG90Q2h1bmtzTG9hZGluZysrO1xyXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcclxuLyoqKioqKi8gXHRcdFx0XHR0aHJvdyBlcnI7XHJcbi8qKioqKiovIFx0XHRcdH0pO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBmaW5pc2hDaHVua0xvYWRpbmcoKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKCFob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0pIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0XHRpZihob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9O1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIGZuO1xyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4vKioqKioqLyBcdFx0dmFyIGhvdCA9IHtcclxuLyoqKioqKi8gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxyXG4vKioqKioqLyBcdFx0XHRfYWNjZXB0ZWREZXBlbmRlbmNpZXM6IHt9LFxyXG4vKioqKioqLyBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxyXG4vKioqKioqLyBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcclxuLyoqKioqKi8gXHRcdFx0X3NlbGZEZWNsaW5lZDogZmFsc2UsXHJcbi8qKioqKiovIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxyXG4vKioqKioqLyBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdFx0Ly8gTW9kdWxlIEFQSVxyXG4vKioqKioqLyBcdFx0XHRhY3RpdmU6IHRydWUsXHJcbi8qKioqKiovIFx0XHRcdGFjY2VwdDogZnVuY3Rpb24oZGVwLCBjYWxsYmFjaykge1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XHJcbi8qKioqKiovIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcImZ1bmN0aW9uXCIpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcclxuLyoqKioqKi8gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xyXG4vKioqKioqLyBcdFx0XHRcdGVsc2VcclxuLyoqKioqKi8gXHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XHJcbi8qKioqKiovIFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XHJcbi8qKioqKiovIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRlbHNlXHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcF0gPSB0cnVlO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuLyoqKioqKi8gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcclxuLyoqKioqKi8gXHRcdFx0fSxcclxuLyoqKioqKi8gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGlkeCA9IGhvdC5fZGlzcG9zZUhhbmRsZXJzLmluZGV4T2YoY2FsbGJhY2spO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcclxuLyoqKioqKi8gXHRcdFx0fSxcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcclxuLyoqKioqKi8gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxyXG4vKioqKioqLyBcdFx0XHRhcHBseTogaG90QXBwbHksXHJcbi8qKioqKiovIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKCFsKSByZXR1cm4gaG90U3RhdHVzO1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XHJcbi8qKioqKiovIFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGlkeCA9IGhvdFN0YXR1c0hhbmRsZXJzLmluZGV4T2YobCk7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xyXG4vKioqKioqLyBcdFx0XHR9LFxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcclxuLyoqKioqKi8gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXHJcbi8qKioqKiovIFx0XHR9O1xyXG4vKioqKioqLyBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIGhvdDtcclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XHJcbi8qKioqKiovIFx0dmFyIGhvdFN0YXR1cyA9IFwiaWRsZVwiO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcclxuLyoqKioqKi8gXHRcdGhvdFN0YXR1cyA9IG5ld1N0YXR1cztcclxuLyoqKioqKi8gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcclxuLyoqKioqKi8gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xyXG4vKioqKioqLyBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xyXG4vKioqKioqLyBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcclxuLyoqKioqKi8gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XHJcbi8qKioqKiovIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XHJcbi8qKioqKiovIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XHJcbi8qKioqKiovIFx0dmFyIGhvdERlZmVycmVkO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdC8vIFRoZSB1cGRhdGUgaW5mb1xyXG4vKioqKioqLyBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xyXG4vKioqKioqLyBcdFx0dmFyIGlzTnVtYmVyID0gKCtpZCkgKyBcIlwiID09PSBpZDtcclxuLyoqKioqKi8gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xyXG4vKioqKioqLyBcdFx0aWYoaG90U3RhdHVzICE9PSBcImlkbGVcIikgdGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XHJcbi8qKioqKiovIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XHJcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJjaGVja1wiKTtcclxuLyoqKioqKi8gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xyXG4vKioqKioqLyBcdFx0XHRpZighdXBkYXRlKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwiaWRsZVwiKTtcclxuLyoqKioqKi8gXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xyXG4vKioqKioqLyBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcclxuLyoqKioqKi8gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcclxuLyoqKioqKi8gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xyXG4vKioqKioqLyBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XHJcbi8qKioqKiovIFx0XHRcdFx0fTtcclxuLyoqKioqKi8gXHRcdFx0fSk7XHJcbi8qKioqKiovIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xyXG4vKioqKioqLyBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XHJcbi8qKioqKiovIFx0XHRcdHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lLWJsb2Nrc1xyXG4vKioqKioqLyBcdFx0XHRcdC8qZ2xvYmFscyBjaHVua0lkICovXHJcbi8qKioqKiovIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0aWYoaG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJiBob3RDaHVua3NMb2FkaW5nID09PSAwICYmIGhvdFdhaXRpbmdGaWxlcyA9PT0gMCkge1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gcHJvbWlzZTtcclxuLyoqKioqKi8gXHRcdH0pO1xyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbi8qKioqKiovIFx0XHRpZighaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxyXG4vKioqKioqLyBcdFx0XHRyZXR1cm47XHJcbi8qKioqKiovIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xyXG4vKioqKioqLyBcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xyXG4vKioqKioqLyBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xyXG4vKioqKioqLyBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcdGlmKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcclxuLyoqKioqKi8gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XHJcbi8qKioqKiovIFx0XHRpZighaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcclxuLyoqKioqKi8gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcclxuLyoqKioqKi8gXHRcdH0gZWxzZSB7XHJcbi8qKioqKiovIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcclxuLyoqKioqKi8gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XHJcbi8qKioqKiovIFx0XHRcdGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XHJcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcclxuLyoqKioqKi8gXHRcdHZhciBkZWZlcnJlZCA9IGhvdERlZmVycmVkO1xyXG4vKioqKioqLyBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xyXG4vKioqKioqLyBcdFx0aWYoIWRlZmVycmVkKSByZXR1cm47XHJcbi8qKioqKiovIFx0XHRpZihob3RBcHBseU9uVXBkYXRlKSB7XHJcbi8qKioqKiovIFx0XHRcdC8vIFdyYXAgZGVmZXJyZWQgb2JqZWN0IGluIFByb21pc2UgdG8gbWFyayBpdCBhcyBhIHdlbGwtaGFuZGxlZCBQcm9taXNlIHRvXHJcbi8qKioqKiovIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxyXG4vKioqKioqLyBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XHJcbi8qKioqKiovIFx0XHRcdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xyXG4vKioqKioqLyBcdFx0XHR9KS50aGVuKFxyXG4vKioqKioqLyBcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xyXG4vKioqKioqLyBcdFx0XHRcdH0sXHJcbi8qKioqKiovIFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdCk7XHJcbi8qKioqKiovIFx0XHR9IGVsc2Uge1xyXG4vKioqKioqLyBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XHJcbi8qKioqKiovIFx0XHRcdGZvcih2YXIgaWQgaW4gaG90VXBkYXRlKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xyXG4vKioqKioqLyBcdFx0aWYoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpIHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcclxuLyoqKioqKi8gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0dmFyIGNiO1xyXG4vKioqKioqLyBcdFx0dmFyIGk7XHJcbi8qKioqKiovIFx0XHR2YXIgajtcclxuLyoqKioqKi8gXHRcdHZhciBtb2R1bGU7XHJcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlSWQ7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XHJcbi8qKioqKiovIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbdXBkYXRlTW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCkubWFwKGZ1bmN0aW9uKGlkKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0cmV0dXJuIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGNoYWluOiBbaWRdLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0aWQ6IGlkXHJcbi8qKioqKiovIFx0XHRcdFx0fTtcclxuLyoqKioqKi8gXHRcdFx0fSk7XHJcbi8qKioqKiovIFx0XHRcdHdoaWxlKHF1ZXVlLmxlbmd0aCA+IDApIHtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBjaGFpbiA9IHF1ZXVlSXRlbS5jaGFpbjtcclxuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0XHRpZighbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZClcclxuLyoqKioqKi8gXHRcdFx0XHRcdGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0cmV0dXJuIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWRlY2xpbmVkXCIsXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXHJcbi8qKioqKiovIFx0XHRcdFx0XHR9O1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRpZihtb2R1bGUuaG90Ll9tYWluKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRyZXR1cm4ge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcclxuLyoqKioqKi8gXHRcdFx0XHRcdH07XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XHJcbi8qKioqKiovIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XHJcbi8qKioqKiovIFx0XHRcdFx0XHRpZighcGFyZW50KSBjb250aW51ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRyZXR1cm4ge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdHR5cGU6IFwiZGVjbGluZWRcIixcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRwYXJlbnRJZDogcGFyZW50SWRcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0fTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSA+PSAwKSBjb250aW51ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZighb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSA9IFtdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XHJcbi8qKioqKiovIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRxdWV1ZS5wdXNoKHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWQ6IHBhcmVudElkXHJcbi8qKioqKiovIFx0XHRcdFx0XHR9KTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIHtcclxuLyoqKioqKi8gXHRcdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXHJcbi8qKioqKiovIFx0XHRcdFx0bW9kdWxlSWQ6IHVwZGF0ZU1vZHVsZUlkLFxyXG4vKioqKioqLyBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxyXG4vKioqKioqLyBcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xyXG4vKioqKioqLyBcdFx0XHR9O1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0ZnVuY3Rpb24gYWRkQWxsVG9TZXQoYSwgYikge1xyXG4vKioqKioqLyBcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcclxuLyoqKioqKi8gXHRcdFx0XHRpZihhLmluZGV4T2YoaXRlbSkgPCAwKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0YS5wdXNoKGl0ZW0pO1xyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxyXG4vKioqKioqLyBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxyXG4vKioqKioqLyBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XHJcbi8qKioqKiovIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XHJcbi8qKioqKiovIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcclxuLyoqKioqKi8gXHRcdFx0Y29uc29sZS53YXJuKFwiW0hNUl0gdW5leHBlY3RlZCByZXF1aXJlKFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIpIHRvIGRpc3Bvc2VkIG1vZHVsZVwiKTtcclxuLyoqKioqKi8gXHRcdH07XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRmb3IodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xyXG4vKioqKioqLyBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciByZXN1bHQ7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoaG90VXBkYXRlW2lkXSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XHJcbi8qKioqKiovIFx0XHRcdFx0fSBlbHNlIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJlc3VsdCA9IHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRtb2R1bGVJZDogaWRcclxuLyoqKioqKi8gXHRcdFx0XHRcdH07XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcclxuLyoqKioqKi8gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XHJcbi8qKioqKiovIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYocmVzdWx0LmNoYWluKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdHN3aXRjaChyZXN1bHQudHlwZSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkRlY2xpbmVkKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFwiQWJvcnRlZCBiZWNhdXNlIG9mIHNlbGYgZGVjbGluZTogXCIgKyByZXN1bHQubW9kdWxlSWQgKyBjaGFpbkluZm8pO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRicmVhaztcclxuLyoqKioqKi8gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uRGVjbGluZWQpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIiBpbiBcIiArIHJlc3VsdC5wYXJlbnRJZCArIGNoYWluSW5mbyk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vblVuYWNjZXB0ZWQpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mbyk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25BY2NlcHRlZClcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25EaXNwb3NlZClcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRGlzcG9zZWQocmVzdWx0KTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0YnJlYWs7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRkZWZhdWx0OlxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRpZihhYm9ydEVycm9yKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoZG9BcHBseSkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0YWRkQWxsVG9TZXQob3V0ZGF0ZWRNb2R1bGVzLCByZXN1bHQub3V0ZGF0ZWRNb2R1bGVzKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGZvcihtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aWYoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSwgcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoZG9EaXNwb3NlKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxyXG4vKioqKioqLyBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xyXG4vKioqKioqLyBcdFx0Zm9yKGkgPSAwOyBpIDwgb3V0ZGF0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcbi8qKioqKiovIFx0XHRcdG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xyXG4vKioqKioqLyBcdFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZClcclxuLyoqKioqKi8gXHRcdFx0XHRvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMucHVzaCh7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxyXG4vKioqKioqLyBcdFx0XHRcdH0pO1xyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0Ly8gTm93IGluIFwiZGlzcG9zZVwiIHBoYXNlXHJcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xyXG4vKioqKioqLyBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xyXG4vKioqKioqLyBcdFx0XHRpZihob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH0pO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0dmFyIGlkeDtcclxuLyoqKioqKi8gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xyXG4vKioqKioqLyBcdFx0d2hpbGUocXVldWUubGVuZ3RoID4gMCkge1xyXG4vKioqKioqLyBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xyXG4vKioqKioqLyBcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0aWYoIW1vZHVsZSkgY29udGludWU7XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdHZhciBkYXRhID0ge307XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xyXG4vKioqKioqLyBcdFx0XHR2YXIgZGlzcG9zZUhhbmRsZXJzID0gbW9kdWxlLmhvdC5fZGlzcG9zZUhhbmRsZXJzO1xyXG4vKioqKioqLyBcdFx0XHRmb3IoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcclxuLyoqKioqKi8gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcclxuLyoqKioqKi8gXHRcdFx0XHRjYihkYXRhKTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxyXG4vKioqKioqLyBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcclxuLyoqKioqKi8gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXHJcbi8qKioqKiovIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXHJcbi8qKioqKiovIFx0XHRcdGZvcihqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xyXG4vKioqKioqLyBcdFx0XHRcdHZhciBjaGlsZCA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlLmNoaWxkcmVuW2pdXTtcclxuLyoqKioqKi8gXHRcdFx0XHRpZighY2hpbGQpIGNvbnRpbnVlO1xyXG4vKioqKioqLyBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XHJcbi8qKioqKiovIFx0XHRcdFx0aWYoaWR4ID49IDApIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XHJcbi8qKioqKiovIFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHR9XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxyXG4vKioqKioqLyBcdFx0dmFyIGRlcGVuZGVuY3k7XHJcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XHJcbi8qKioqKiovIFx0XHRmb3IobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcclxuLyoqKioqKi8gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0XHRpZihtb2R1bGUpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdH1cclxuLyoqKioqKi8gXHRcclxuLyoqKioqKi8gXHRcdC8vIE5vdCBpbiBcImFwcGx5XCIgcGhhc2VcclxuLyoqKioqKi8gXHRcdGhvdFNldFN0YXR1cyhcImFwcGx5XCIpO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXHJcbi8qKioqKiovIFx0XHRmb3IobW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xyXG4vKioqKioqLyBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXBwbGllZFVwZGF0ZSwgbW9kdWxlSWQpKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcclxuLyoqKioqKi8gXHRcdHZhciBlcnJvciA9IG51bGw7XHJcbi8qKioqKiovIFx0XHRmb3IobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcclxuLyoqKioqKi8gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuLyoqKioqKi8gXHRcdFx0XHRpZihtb2R1bGUpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRjYiA9IG1vZHVsZS5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcGVuZGVuY3ldO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZihjYikge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGlmKGNhbGxiYWNrcy5pbmRleE9mKGNiKSA+PSAwKSBjb250aW51ZTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRjYWxsYmFja3MucHVzaChjYik7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdGZvcihpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0dHJ5IHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkVycm9yZWQpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGRlcGVuZGVuY3lJZDogbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV0sXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdH0pO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcclxuLyoqKioqKi8gXHRcdGZvcihpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG4vKioqKioqLyBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcclxuLyoqKioqKi8gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcclxuLyoqKioqKi8gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xyXG4vKioqKioqLyBcdFx0XHR0cnkge1xyXG4vKioqKioqLyBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xyXG4vKioqKioqLyBcdFx0XHR9IGNhdGNoKGVycikge1xyXG4vKioqKioqLyBcdFx0XHRcdGlmKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR0cnkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpdGVtLmVycm9ySGFuZGxlcihlcnIpO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fSBjYXRjaChlcnIyKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25FcnJvcmVkKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0b3JnaW5hbEVycm9yOiBlcnIsIC8vIFRPRE8gcmVtb3ZlIGluIHdlYnBhY2sgNFxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0fSk7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyMjtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbi8qKioqKiovIFx0XHRcdFx0XHR9XHJcbi8qKioqKiovIFx0XHRcdFx0fSBlbHNlIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKG9wdGlvbnMub25FcnJvcmVkKSB7XHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yZWRcIixcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXHJcbi8qKioqKiovIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHR9KTtcclxuLyoqKioqKi8gXHRcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcclxuLyoqKioqKi8gXHRcdFx0XHRcdFx0aWYoIWVycm9yKVxyXG4vKioqKioqLyBcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xyXG4vKioqKioqLyBcdFx0XHRcdFx0fVxyXG4vKioqKioqLyBcdFx0XHRcdH1cclxuLyoqKioqKi8gXHRcdFx0fVxyXG4vKioqKioqLyBcdFx0fVxyXG4vKioqKioqLyBcdFxyXG4vKioqKioqLyBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcclxuLyoqKioqKi8gXHRcdGlmKGVycm9yKSB7XHJcbi8qKioqKiovIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XHJcbi8qKioqKiovIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XHJcbi8qKioqKiovIFx0XHR9XHJcbi8qKioqKiovIFx0XHJcbi8qKioqKiovIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xyXG4vKioqKioqLyBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcclxuLyoqKioqKi8gXHRcdFx0cmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xyXG4vKioqKioqLyBcdFx0fSk7XHJcbi8qKioqKiovIFx0fVxyXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4vKioqKioqLyBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4vKioqKioqLyBcdFx0XHRjaGlsZHJlbjogW11cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19oYXNoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5oID0gZnVuY3Rpb24oKSB7IHJldHVybiBob3RDdXJyZW50SGFzaDsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZSgwKShfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShfX3dlYnBhY2tfZXhwb3J0c19fLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJBcHBsaWNhdGlvblwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIEFwcGxpY2F0aW9uOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2VuZ2luZV9lbmdpbmVfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cclxudmFyIEFwcGxpY2F0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gQXBwbGljYXRpb24oKSB7XHJcbiAgICAgICAgLy8vIEl0IHdpbGwgY3JlYXRlIEVuZ2luZSBvYmplY3QgYW5kIGFwcGVuZCB0aGF0IHRvIGFwcGxpY2F0aW9uIGluIGRvbS5cclxuICAgICAgICB2YXIgb0VuZ2luZSA9IG5ldyBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX2VuZ2luZV9lbmdpbmVfX1tcImFcIiAvKiBFbmdpbmUgKi9dKCk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBcIikuYXBwZW5kQ2hpbGQob0VuZ2luZS5zdGFydCgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBBcHBsaWNhdGlvbjtcclxufSgpKTtcclxuXHJcbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgYSA9IG5ldyBBcHBsaWNhdGlvbigpOyAvLy8gQXBwbGljYXRpb24gc3RhcnRzIGZyb20gaGVyZS5cclxufTtcclxuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRW5naW5lOyB9KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzBfX3dlYnNvY2tldGhlbHBlcl93ZWJzb2NrZXRoZWxwZXJfXyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19jb25zdGFudHNfY29uc3RhbnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuLyogaGFybW9ueSBpbXBvcnQgKi8gdmFyIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMl9fc3RvY2t0YWJsZV9zdG9ja3RhYmxlX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXHJcblxyXG5cclxudmFyIEVuZ2luZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEVuZ2luZSgpIHtcclxuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5lbG1BcHBUaXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcclxuICAgICAgICB0aGlzLmJBcHBMb2FkZWQgPSBmYWxzZTtcclxuICAgICAgICAvLy8gSGFuZGxlciB0byBoYW5kbGUgY29ubmVjdGlvbiBvcGVuLlxyXG4gICAgICAgIHRoaXMub25Db25uZWN0aW9uT3BlbiA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3Rpb24gZXN0YWJsaXNoZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8vIEhhbmRsZXIgd2lsbCBleGVjdXRlIGVhY2ggdGltZSB3ZWJzb2NrZXQgc2VuZCBtZXNzYWdlLlxyXG4gICAgICAgIHRoaXMub25Db25uZWN0aW9uTWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICB2YXIgb0VuZ2luZSA9IF90aGlzO1xyXG4gICAgICAgICAgICBvRW5naW5lLnNob3dBcHBsaWNhdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAoIW9FbmdpbmUub1N0b2NrVGFibGUpIHtcclxuICAgICAgICAgICAgICAgIG9FbmdpbmUub1N0b2NrVGFibGUgPSBuZXcgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19zdG9ja3RhYmxlX3N0b2NrdGFibGVfX1tcImFcIiAvKiBTdG9ja1RhYmxlICovXSgpO1xyXG4gICAgICAgICAgICAgICAgb0VuZ2luZS5lbGVtZW50LmFwcGVuZENoaWxkKG9FbmdpbmUub1N0b2NrVGFibGUuZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb0VuZ2luZS5vU3RvY2tUYWJsZS5zZXREYXRhKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8vIEhhbmRsZXIgdG8gaGFuZGxlIGNvbm5lY3Rpb24gY2xvc2UuXHJcbiAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25DbG9zZSA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbm5lY3Rpb24gY2xvc2VkIHN1Y2Nlc3NmdWxseVwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vLyBIYW5kbGVyIHRvIGhhbmRsZSBjb25uZWN0aW9uIGVycm9ycy5cclxuICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkVycm9yID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiUHJvYmxlbSBjb25uZWN0aW5nIHRvIHNlcnZlclwiKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBvRW5naW5lID0gdGhpcztcclxuICAgICAgICBvRW5naW5lLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xyXG4gICAgICAgIG9FbmdpbmUucmVuZGVyKCk7XHJcbiAgICB9XHJcbiAgICAvLy8gSXQgd2lsbCBjcmVhdGUgYXBwIHRpdGxlLlxyXG4gICAgRW5naW5lLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9FbmdpbmUgPSB0aGlzO1xyXG4gICAgICAgIG9FbmdpbmUuZWxtQXBwVGl0bGUuY2xhc3NOYW1lID0gXCJhcHAtdGl0bGVcIjtcclxuICAgICAgICBvRW5naW5lLmVsbUFwcFRpdGxlLmlubmVyVGV4dCA9IFwiKExpdmUpIFN0b2NrcyBBcHBcIjtcclxuICAgICAgICBvRW5naW5lLmVsZW1lbnQuYXBwZW5kQ2hpbGQob0VuZ2luZS5lbG1BcHBUaXRsZSk7XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgY2FsbCBzZXRkYXRhIGFuZCByZXR1cm4gZW5naW5lIGVsZW1lbnQuXHJcbiAgICBFbmdpbmUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvRW5naW5lID0gdGhpcztcclxuICAgICAgICBvRW5naW5lLnNldERhdGEoKTtcclxuICAgICAgICByZXR1cm4gb0VuZ2luZS5lbGVtZW50O1xyXG4gICAgfTtcclxuICAgIC8vLyBJdCB3aWxsIHJlcXVlc3QgdG8gd2Vic29ja2V0IGZvciBzdG9jayBwcm9jZS5cclxuICAgIEVuZ2luZS5wcm90b3R5cGUuc2V0RGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb0VuZ2luZSA9IHRoaXM7XHJcbiAgICAgICAgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX193ZWJzb2NrZXRoZWxwZXJfd2Vic29ja2V0aGVscGVyX19bXCJhXCIgLyogV2ViU29ja2V0SGVscGVyICovXS5nZXRJbnN0YW5jZSgpLmNyZWF0ZShfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX2NvbnN0YW50c19jb25zdGFudHNfX1tcImFcIiAvKiBIT1NUX1VSTCAqL10pO1xyXG4gICAgICAgIF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fd2Vic29ja2V0aGVscGVyX3dlYnNvY2tldGhlbHBlcl9fW1wiYVwiIC8qIFdlYlNvY2tldEhlbHBlciAqL10uZ2V0SW5zdGFuY2UoKS5yZWdpc3RlckV2ZW50cyh7XHJcbiAgICAgICAgICAgIFwib25Db25uZWN0aW9uT3BlblwiOiBvRW5naW5lLm9uQ29ubmVjdGlvbk9wZW4sXHJcbiAgICAgICAgICAgIFwib25Db25uZWN0aW9uTWVzc2FnZVwiOiBvRW5naW5lLm9uQ29ubmVjdGlvbk1lc3NhZ2UsXHJcbiAgICAgICAgICAgIFwib25Db25uZWN0aW9uQ2xvc2VcIjogb0VuZ2luZS5vbkNvbm5lY3Rpb25DbG9zZSxcclxuICAgICAgICAgICAgXCJvbkNvbm5lY3Rpb25FcnJvclwiOiBvRW5naW5lLm9uQ29ubmVjdGlvbkVycm9yLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIEVuZ2luZS5wcm90b3R5cGUuc2hvd0FwcGxpY2F0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvRW5naW5lID0gdGhpcztcclxuICAgICAgICBpZiAoIW9FbmdpbmUuYkFwcExvYWRlZCkge1xyXG4gICAgICAgICAgICBvRW5naW5lLmVsZW1lbnQuc3R5bGUuZGlzcGxheSA9IFwiXCI7XHJcbiAgICAgICAgICAgIG9FbmdpbmUuYkFwcExvYWRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwLWxvYWRlclwiKS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBFbmdpbmU7XHJcbn0oKSk7XHJcblxyXG5cblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBfX3dlYnBhY2tfZXhwb3J0c19fLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuLyogaGFybW9ueSBleHBvcnQgKGJpbmRpbmcpICovIF9fd2VicGFja19yZXF1aXJlX18uZChfX3dlYnBhY2tfZXhwb3J0c19fLCBcImFcIiwgZnVuY3Rpb24oKSB7IHJldHVybiBXZWJTb2NrZXRIZWxwZXI7IH0pO1xuLy8vIENyZWF0ZSBzaW5nbHRvbiBjbGFzcyB0byBzZW5kIHdlYnNvY2tldCByZXF1ZXN0LlxyXG52YXIgV2ViU29ja2V0SGVscGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gV2ViU29ja2V0SGVscGVyKCkge1xyXG4gICAgfVxyXG4gICAgV2ViU29ja2V0SGVscGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghV2ViU29ja2V0SGVscGVyLmluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIFdlYlNvY2tldEhlbHBlci5pbnN0YW5jZSA9IG5ldyBXZWJTb2NrZXRIZWxwZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFdlYlNvY2tldEhlbHBlci5pbnN0YW5jZTtcclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCBjcmVhdGUgd2Vic29ja2V0IGNvbm5lY3Rpb24uXHJcbiAgICBXZWJTb2NrZXRIZWxwZXIucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICB2YXIgb1dlYlNvY2tldEhlbHBlciA9IHRoaXM7XHJcbiAgICAgICAgb1dlYlNvY2tldEhlbHBlci5vV2ViU29ja2V0ID0gbmV3IFdlYlNvY2tldCh1cmwpO1xyXG4gICAgICAgIHJldHVybiBvV2ViU29ja2V0SGVscGVyLm9XZWJTb2NrZXQ7XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgcmVnaXN0ZXIgd2Vic29ja2V0IGV2ZW50cyBhY2NvcmRpbmcgdG8gZ2l2ZW4gb3B0aW9uIGluIGZvcm0gb2YgSlNPTi5cclxuICAgIFdlYlNvY2tldEhlbHBlci5wcm90b3R5cGUucmVnaXN0ZXJFdmVudHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBvV2ViU29ja2V0SGVscGVyID0gdGhpcztcclxuICAgICAgICBpZiAob3B0aW9uc1tcIm9uQ29ubmVjdGlvbk9wZW5cIl0pIHtcclxuICAgICAgICAgICAgb1dlYlNvY2tldEhlbHBlci5vV2ViU29ja2V0Lm9ub3BlbiA9IG9wdGlvbnNbXCJvbkNvbm5lY3Rpb25PcGVuXCJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9uc1tcIm9uQ29ubmVjdGlvbk1lc3NhZ2VcIl0pIHtcclxuICAgICAgICAgICAgb1dlYlNvY2tldEhlbHBlci5vV2ViU29ja2V0Lm9ubWVzc2FnZSA9IG9wdGlvbnNbXCJvbkNvbm5lY3Rpb25NZXNzYWdlXCJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9uc1tcIm9uQ29ubmVjdGlvbkNsb3NlXCJdKSB7XHJcbiAgICAgICAgICAgIG9XZWJTb2NrZXRIZWxwZXIub1dlYlNvY2tldC5vbmNsb3NlID0gb3B0aW9uc1tcIm9uQ29ubmVjdGlvbkNsb3NlXCJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9uc1tcIm9uQ29ubmVjdGlvbkVycm9yXCJdKSB7XHJcbiAgICAgICAgICAgIG9XZWJTb2NrZXRIZWxwZXIub1dlYlNvY2tldC5vbmVycm9yID0gb3B0aW9uc1tcIm9uQ29ubmVjdGlvbkVycm9yXCJdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gV2ViU29ja2V0SGVscGVyO1xyXG59KCkpO1xyXG5cclxuXG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gSE9TVF9VUkw7IH0pO1xudmFyIEhPU1RfVVJMID0gXCJ3czovL3N0b2Nrcy5tbmV0LndlYnNpdGVcIjtcclxuXG5cbi8qKiovIH0pLFxuLyogNSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU3RvY2tUYWJsZTsgfSk7XG4vKiBoYXJtb255IGltcG9ydCAqLyB2YXIgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX19zdG9ja21hcF9fID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbi8qIGhhcm1vbnkgaW1wb3J0ICovIHZhciBfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzFfX3N0b2Nrcm93X3N0b2Nrcm93X18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xuXHJcblxyXG52YXIgU3RvY2tUYWJsZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0b2NrVGFibGUoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9ja01hcCA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMuc3RvY2tSb3cgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuZWxtSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLmVsbUhlYWRlck5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICB0aGlzLmVsbUhlYWRlclByaWNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgdGhpcy5lbG1IZWFkZXJMYXN0VXBkYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgdmFyIG9TdG9ja1RhYmxlID0gdGhpcztcclxuICAgICAgICBvU3RvY2tUYWJsZS5lbGVtZW50LmNsYXNzTmFtZSA9IFwic3RvY2stdGFibGVcIjtcclxuICAgICAgICBvU3RvY2tUYWJsZS5lbGVtZW50LmFwcGVuZENoaWxkKG9TdG9ja1RhYmxlLmNyZWF0ZVRhYmxlSGVhZGVyKCkpO1xyXG4gICAgfVxyXG4gICAgLy8vIEl0IHdpbGwgY3JlYXRlIGhlYWRlciBvZiB0YWJsZS4gaS5lLiB8IFRpY2tlciB8IFByaWNlIHwgTGFzdCBVcGRhdGUgfFxyXG4gICAgU3RvY2tUYWJsZS5wcm90b3R5cGUuY3JlYXRlVGFibGVIZWFkZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9TdG9ja1RhYmxlID0gdGhpcztcclxuICAgICAgICB2YXIgZWxtSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICBlbG1IZWFkZXIuY2xhc3NOYW1lID0gXCJzdG9jay1yb3ctaGVhZGVyXCI7XHJcbiAgICAgICAgb1N0b2NrVGFibGUuZWxtSGVhZGVyTmFtZS5pbm5lclRleHQgPSBcIlRpY2tlclwiO1xyXG4gICAgICAgIG9TdG9ja1RhYmxlLmVsbUhlYWRlclByaWNlLmlubmVyVGV4dCA9IFwiUHJpY2VcIjtcclxuICAgICAgICBvU3RvY2tUYWJsZS5lbG1IZWFkZXJMYXN0VXBkYXRlLmlubmVyVGV4dCA9IFwiTGFzdCBVcGRhdGVcIjtcclxuICAgICAgICBvU3RvY2tUYWJsZS5lbG1IZWFkZXJOYW1lLmNsYXNzTmFtZSA9IFwic3RvY2stdGlja2VyXCI7XHJcbiAgICAgICAgb1N0b2NrVGFibGUuZWxtSGVhZGVyUHJpY2UuY2xhc3NOYW1lID0gXCJzdG9jay1wcmljZVwiO1xyXG4gICAgICAgIG9TdG9ja1RhYmxlLmVsbUhlYWRlckxhc3RVcGRhdGUuY2xhc3NOYW1lID0gXCJzdG9jay1sYXN0LXVwZGF0ZVwiO1xyXG4gICAgICAgIGVsbUhlYWRlci5hcHBlbmRDaGlsZChvU3RvY2tUYWJsZS5lbG1IZWFkZXJOYW1lKTtcclxuICAgICAgICBlbG1IZWFkZXIuYXBwZW5kQ2hpbGQob1N0b2NrVGFibGUuZWxtSGVhZGVyUHJpY2UpO1xyXG4gICAgICAgIGVsbUhlYWRlci5hcHBlbmRDaGlsZChvU3RvY2tUYWJsZS5lbG1IZWFkZXJMYXN0VXBkYXRlKTtcclxuICAgICAgICByZXR1cm4gZWxtSGVhZGVyO1xyXG4gICAgfTtcclxuICAgIC8vLyBJdCB3aWxsIHNldCBhbmQgdXBkYXRlIHN0b2NrIGRhdGEgdG8gc3RvY2tyb3cuIElmIHN0b2NrIHJvdyBpcyBhbHJlYWR5IGNyZWF0ZSBmb3Igc3RvY2sgdGhlbiBpdCB3aWxsIGp1c3QgdXBkYXRlIGl0XHJcbiAgICAvLy8gb3RoZXJ3aXNlIGl0IHdpbGwgY3JlYXRlIHN0b2NrIHJvdyBmb3Igc3RvY2suXHJcbiAgICBTdG9ja1RhYmxlLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24gKHN0b2NrUmF0ZSkge1xyXG4gICAgICAgIHZhciBvU3RvY2tUYWJsZSA9IHRoaXM7XHJcbiAgICAgICAgdmFyIGxzdFN0b2NrUmF0ZSA9IEpTT04ucGFyc2Uoc3RvY2tSYXRlKTtcclxuICAgICAgICAvLy8gSXQgd2lsbCBmaW5kIHVuaXF1ZSBzdG9jayBsaXN0IHRvIGNyZWF0ZSBvciB1cGRhdGUuXHJcbiAgICAgICAgbHN0U3RvY2tSYXRlLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVsZW1lbnRbMF0gKyBlbGVtZW50WzFdKTtcclxuICAgICAgICAgICAgdmFyIG9DdXJTdG9jayA9IG9TdG9ja1RhYmxlLnN0b2NrTWFwLmZpbHRlcihmdW5jdGlvbiAoc3RvY2spIHsgcmV0dXJuIHN0b2NrLm5hbWUgPT0gZWxlbWVudFswXTsgfSk7XHJcbiAgICAgICAgICAgIGlmIChvQ3VyU3RvY2subGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgIG9TdG9ja1RhYmxlLnN0b2NrTWFwLnB1c2gobmV3IF9fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fc3RvY2ttYXBfX1tcImFcIiAvKiBTdG9ja01hcCAqL10oZWxlbWVudFswXSwgZWxlbWVudFsxXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9DdXJTdG9jay5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgb0N1clN0b2NrWzBdLnByaWNlID0gZWxlbWVudFsxXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb1N0b2NrVGFibGUuc3RvY2tNYXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGJGb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9TdG9ja1RhYmxlLnN0b2NrUm93Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob1N0b2NrVGFibGUuc3RvY2tNYXBbaV0ubmFtZSA9PSBvU3RvY2tUYWJsZS5zdG9ja1Jvd1tqXS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYkZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBvU3RvY2tUYWJsZS5zdG9ja1Jvd1tqXS51cGRhdGVEYXRhKG9TdG9ja1RhYmxlLnN0b2NrTWFwW2ldLm5hbWUsIG9TdG9ja1RhYmxlLnN0b2NrTWFwW2ldLnByaWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWJGb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgb1N0b2NrVGFibGUuc3RvY2tSb3cucHVzaChuZXcgX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8xX19zdG9ja3Jvd19zdG9ja3Jvd19fW1wiYVwiIC8qIFN0b2NrUm93ICovXShvU3RvY2tUYWJsZS5zdG9ja01hcFtpXS5uYW1lLCBvU3RvY2tUYWJsZS5zdG9ja01hcFtpXS5wcmljZSkpO1xyXG4gICAgICAgICAgICAgICAgb1N0b2NrVGFibGUuZWxlbWVudC5hcHBlbmRDaGlsZChvU3RvY2tUYWJsZS5zdG9ja1Jvd1tvU3RvY2tUYWJsZS5zdG9ja1Jvdy5sZW5ndGggLSAxXS5lbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gU3RvY2tUYWJsZTtcclxufSgpKTtcclxuXHJcblxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIF9fd2VicGFja19leHBvcnRzX18sIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG4vKiBoYXJtb255IGV4cG9ydCAoYmluZGluZykgKi8gX193ZWJwYWNrX3JlcXVpcmVfXy5kKF9fd2VicGFja19leHBvcnRzX18sIFwiYVwiLCBmdW5jdGlvbigpIHsgcmV0dXJuIFN0b2NrTWFwOyB9KTtcbnZhciBTdG9ja01hcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0b2NrTWFwKHN0ck5hbWUsIHN0clByaWNlKSB7XHJcbiAgICAgICAgdmFyIG9TdG9ja01hcCA9IHRoaXM7XHJcbiAgICAgICAgb1N0b2NrTWFwLm5hbWUgPSBzdHJOYW1lO1xyXG4gICAgICAgIG9TdG9ja01hcC5wcmljZSA9IHN0clByaWNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0b2NrTWFwO1xyXG59KCkpO1xyXG5cclxuXG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgX193ZWJwYWNrX2V4cG9ydHNfXywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcbi8qIGhhcm1vbnkgZXhwb3J0IChiaW5kaW5nKSAqLyBfX3dlYnBhY2tfcmVxdWlyZV9fLmQoX193ZWJwYWNrX2V4cG9ydHNfXywgXCJhXCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gU3RvY2tSb3c7IH0pO1xudmFyIFN0b2NrUm93ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3RvY2tSb3coc3RyTmFtZSwgc3RyUHJpY2UpIHtcclxuICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuZWxtTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgIHRoaXMuZWxtUHJpY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICB0aGlzLmVsbUxhc3RVcGRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICB0aGlzLmxzdEhpc3RvcnkgPSBuZXcgQXJyYXkoKTtcclxuICAgICAgICB2YXIgb1N0b2NrUm93ID0gdGhpcztcclxuICAgICAgICBvU3RvY2tSb3cubmFtZSA9IHN0ck5hbWU7XHJcbiAgICAgICAgb1N0b2NrUm93LnByaWNlID0gc3RyUHJpY2U7XHJcbiAgICAgICAgb1N0b2NrUm93LnVwZGF0ZVRpbWUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5hZGRFbGVtZW50cygpO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5zZXRIaXN0b3J5KG9TdG9ja1Jvdy5wcmljZSwgb1N0b2NrUm93LnVwZGF0ZVRpbWUpO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5yZW5kZXJTdG9ja0RhdGEob1N0b2NrUm93Lm5hbWUsIG9TdG9ja1Jvdy5wcmljZSwgb1N0b2NrUm93LmdldExhc3RVcGRhdGVkVGltZSgpKTtcclxuICAgICAgICBvU3RvY2tSb3cud2F0Y2hMYXN0VXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgICAvLy8gSXQgd2lsbCBhZGQgYWxsIEh0bWxFbGVtZW50cyB0byByb3cgZWxlbWVudC5cclxuICAgIFN0b2NrUm93LnByb3RvdHlwZS5hZGRFbGVtZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb1N0b2NrUm93ID0gdGhpcztcclxuICAgICAgICBvU3RvY2tSb3cuZWxlbWVudC5jbGFzc05hbWUgPSBcInN0b2NrLXJvd1wiO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5lbG1OYW1lLmNsYXNzTmFtZSA9IFwic3RvY2stbmFtZVwiO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5lbG1QcmljZS5jbGFzc05hbWUgPSBcInN0b2NrLXByaWNlXCI7XHJcbiAgICAgICAgb1N0b2NrUm93LmVsbUxhc3RVcGRhdGUuY2xhc3NOYW1lID0gXCJzdG9jay1sYXN0LXVwZGF0ZVwiO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5lbGVtZW50LmFwcGVuZENoaWxkKG9TdG9ja1Jvdy5lbG1OYW1lKTtcclxuICAgICAgICBvU3RvY2tSb3cuZWxlbWVudC5hcHBlbmRDaGlsZChvU3RvY2tSb3cuZWxtUHJpY2UpO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5lbGVtZW50LmFwcGVuZENoaWxkKG9TdG9ja1Jvdy5lbG1MYXN0VXBkYXRlKTtcclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCBzdGFydCB3YXRjaGluZyBzdG9jayB1cGRhdGVkIHRpbWUgdG8gZGlzcGxheSBsYXN0IHVwZGF0ZWQgdGltZS5cclxuICAgIFN0b2NrUm93LnByb3RvdHlwZS53YXRjaExhc3RVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9TdG9ja1JvdyA9IHRoaXM7XHJcbiAgICAgICAgb1N0b2NrUm93Lmxhc3RVcGRhdGVUaW1lciA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0aW1lRGlmZiA9IG9TdG9ja1Jvdy5nZXRMYXN0VXBkYXRlZFRpbWUoKTtcclxuICAgICAgICAgICAgdmFyIHRpbWUgPSBwYXJzZUludCgocGFyc2VJbnQodGltZURpZmYpIC8gMTAwMCkudG9GaXhlZCgwKSk7XHJcbiAgICAgICAgICAgIGlmICh0aW1lIC8gNjAgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBvU3RvY2tSb3cuZWxtTGFzdFVwZGF0ZS5pbm5lckhUTUwgPSBcIkEgZmV3IFNlY29uZHMgQWdvXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGltZSAvICg2MCAqIDYwKSA8IDEpIHtcclxuICAgICAgICAgICAgICAgIG9TdG9ja1Jvdy5lbG1MYXN0VXBkYXRlLmlubmVySFRNTCA9IHBhcnNlSW50KCh0aW1lIC8gNjApLnRvRml4ZWQoMCkpICsgXCIgbWludXRlcyBhZ29cIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0aW1lIC8gKDYwICogNjAgKiA2MCkgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob1N0b2NrUm93LmlzRGF0ZVRvZGF5KG9TdG9ja1Jvdy51cGRhdGVUaW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9TdG9ja1Jvdy5lbG1MYXN0VXBkYXRlLmlubmVySFRNTCA9IG9TdG9ja1Jvdy5nZXRUaW1lRnJvbURhdGUob1N0b2NrUm93LnVwZGF0ZVRpbWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb1N0b2NrUm93LmVsbUxhc3RVcGRhdGUuaW5uZXJIVE1MID0gb1N0b2NrUm93LmdldERheU1vbnRoRnJvbURhdGUob1N0b2NrUm93LnVwZGF0ZVRpbWUpICsgXCIgXCIgKyBvU3RvY2tSb3cuZ2V0VGltZUZyb21EYXRlKG9TdG9ja1Jvdy51cGRhdGVUaW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIDYwMDAwKTtcclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCByZXR1cm4gdHJ1ZSBpZiBnaXZlbiBkYXRlIGlzIHRvZGF5IGVsc2UgZmFsc2UuXHJcbiAgICBTdG9ja1Jvdy5wcm90b3R5cGUuaXNEYXRlVG9kYXkgPSBmdW5jdGlvbiAob0RhdGUpIHtcclxuICAgICAgICBpZiAobmV3IERhdGUoKS5nZXRGdWxsWWVhcigpID09IG9EYXRlLmdldEZ1bGxZZWFyKClcclxuICAgICAgICAgICAgJiYgbmV3IERhdGUoKS5nZXRNb250aCgpID09IG9EYXRlLmdldE1vbnRoKClcclxuICAgICAgICAgICAgJiYgbmV3IERhdGUoKS5nZXREYXkoKSA9PSBvRGF0ZS5nZXREYXkoKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8vLyBJdCB3aWxsIHJldHVybiBpbiBmb3JtYXQgb2YgMTJocnMvMjRocnMgaS5lLiAwMjowMSBwbSAvIDE0OjAxXHJcbiAgICBTdG9ja1Jvdy5wcm90b3R5cGUuZ2V0VGltZUZyb21EYXRlID0gZnVuY3Rpb24gKG9EYXRlLCBiSXMxMmhyKSB7XHJcbiAgICAgICAgaWYgKGJJczEyaHIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9EYXRlLnRvTG9jYWxlVGltZVN0cmluZygpLnNwbGl0KFwiOlwiKVswXSArIFwiOlwiXHJcbiAgICAgICAgICAgICAgICArIG9EYXRlLnRvTG9jYWxlVGltZVN0cmluZygpLnNwbGl0KFwiOlwiKVsxXSArIFwiIFwiXHJcbiAgICAgICAgICAgICAgICArIG9EYXRlLnRvTG9jYWxlVGltZVN0cmluZygpLnNwbGl0KFwiOlwiKVsyXS5zcGxpdChcIiBcIilbMV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gb0RhdGUudG9UaW1lU3RyaW5nKCkuc3BsaXQoXCI6XCIpWzBdICsgXCI6XCJcclxuICAgICAgICAgICAgICAgICsgb0RhdGUudG9UaW1lU3RyaW5nKCkuc3BsaXQoXCI6XCIpWzFdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCByZXR1cm4gZGF5IGFuZCBtb250aCBpbiBmb3JtYXQgb2YgZGQgbW9uLiBpLmUgMjUgRGVjXHJcbiAgICBTdG9ja1Jvdy5wcm90b3R5cGUuZ2V0RGF5TW9udGhGcm9tRGF0ZSA9IGZ1bmN0aW9uIChvRGF0ZSkge1xyXG4gICAgICAgIHJldHVybiBvRGF0ZS50b0RhdGVTdHJpbmcoKS5zcGxpdChcIiBcIilbMl0gKyBcIiBcIiArIG9EYXRlLnRvRGF0ZVN0cmluZygpLnNwbGl0KFwiIFwiKVsxXTtcclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCB1cGRhdGUgc3RvY2sgcHJpY2UgdG8gdmlldyBhbmQgbWFpbnRhaW4gaGlzdG9yeSBvZiBzdG9jay5cclxuICAgIFN0b2NrUm93LnByb3RvdHlwZS51cGRhdGVEYXRhID0gZnVuY3Rpb24gKHN0ck5hbWUsIHN0clByaWNlKSB7XHJcbiAgICAgICAgdmFyIG9TdG9ja1JvdyA9IHRoaXM7XHJcbiAgICAgICAgLy8vIENobmFnZSBzdG9jayBwcmljZSBtYW51YWxseSB0byBjaGVjayBpbmNyZWFzZSBhbmQgZGVjcmVhc2UgcHJpY2Ugb2Ygc3RvY2suXHJcbiAgICAgICAgLy8gbGV0IGE6IGJvb2xlYW4gPSBNYXRoLnJhbmRvbSgpICogMTAgPiA1O1xyXG4gICAgICAgIC8vIGxldCBwcjpudW1iZXIgPSBwYXJzZUZsb2F0KHBhcnNlRmxvYXQoc3RyUHJpY2UpLnRvRml4ZWQoMikpO1xyXG4gICAgICAgIC8vIHN0clByaWNlID0gYSA/IChwciArPSAwLjEpLnRvU3RyaW5nKCkgOiAocHIgLT0gMC4xKS50b1N0cmluZygpO1xyXG4gICAgICAgIG9TdG9ja1Jvdy51cGRhdGVUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICBvU3RvY2tSb3cucHJpY2UgPSBzdHJQcmljZTtcclxuICAgICAgICBvU3RvY2tSb3cucmVuZGVyU3RvY2tEYXRhKHN0ck5hbWUsIHN0clByaWNlLCBvU3RvY2tSb3cuZ2V0TGFzdFVwZGF0ZWRUaW1lKCkpO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5zZXRIaXN0b3J5KG9TdG9ja1Jvdy5wcmljZSwgb1N0b2NrUm93LnVwZGF0ZVRpbWUpO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5wcmV2aW91c1ByaWNlID0gb1N0b2NrUm93LnByaWNlO1xyXG4gICAgfTtcclxuICAgIC8vLyBJdCB3aWxsIG1ha2UgVUkgY2hhbmdlcyBhY29ycmRpbmcgdG8gcHJpY2Ugb2Ygc3RvY2suXHJcbiAgICBTdG9ja1Jvdy5wcm90b3R5cGUucmVuZGVyU3RvY2tEYXRhID0gZnVuY3Rpb24gKHN0ck5hbWUsIHN0clByaWNlLCBzdHJMYXN0VXBkYXRlZFRpbWUpIHtcclxuICAgICAgICB2YXIgb1N0b2NrUm93ID0gdGhpcztcclxuICAgICAgICBvU3RvY2tSb3cuZWxtTmFtZS5pbm5lckhUTUwgPSBzdHJOYW1lO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5lbG1QcmljZS5pbm5lckhUTUwgPSBwYXJzZUZsb2F0KHN0clByaWNlKS50b0ZpeGVkKDIpO1xyXG4gICAgICAgIGlmIChwYXJzZUludChzdHJMYXN0VXBkYXRlZFRpbWUpIDwgNjApIHtcclxuICAgICAgICAgICAgb1N0b2NrUm93LmVsbUxhc3RVcGRhdGUuaW5uZXJIVE1MID0gXCJBIGZldyBTZWNvbmRzIEFnb1wiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob1N0b2NrUm93LnByZXZpb3VzUHJpY2UpIHtcclxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQoc3RyUHJpY2UpLnRvRml4ZWQoMikgIT0gcGFyc2VGbG9hdChvU3RvY2tSb3cucHJldmlvdXNQcmljZSkudG9GaXhlZCgyKSkge1xyXG4gICAgICAgICAgICAgICAgb1N0b2NrUm93LmVsbVByaWNlLmNsYXNzTGlzdC5yZW1vdmUoXCJzdG9jay1wcmljZS1pbmNyZWFzZVwiKTtcclxuICAgICAgICAgICAgICAgIG9TdG9ja1Jvdy5lbG1QcmljZS5jbGFzc0xpc3QucmVtb3ZlKFwic3RvY2stcHJpY2UtZGVjcmVhc2VcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQoc3RyUHJpY2UpLnRvRml4ZWQoMikgPiBwYXJzZUZsb2F0KG9TdG9ja1Jvdy5wcmV2aW91c1ByaWNlKS50b0ZpeGVkKDIpKSB7XHJcbiAgICAgICAgICAgICAgICBvU3RvY2tSb3cuZWxtUHJpY2UuY2xhc3NMaXN0LmFkZChcInN0b2NrLXByaWNlLWluY3JlYXNlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHBhcnNlRmxvYXQoc3RyUHJpY2UpLnRvRml4ZWQoMikgPCBwYXJzZUZsb2F0KG9TdG9ja1Jvdy5wcmV2aW91c1ByaWNlKS50b0ZpeGVkKDIpKSB7XHJcbiAgICAgICAgICAgICAgICBvU3RvY2tSb3cuZWxtUHJpY2UuY2xhc3NMaXN0LmFkZChcInN0b2NrLXByaWNlLWRlY3JlYXNlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIC8vLyBJdCB3aWxsIHN0b3JlIHByZXZpb3VzIHByaWNlIG9mIHN0b2NrIHRvIG1haW50YWluIGhpc3RvcnkuXHJcbiAgICBTdG9ja1Jvdy5wcm90b3R5cGUuc2V0SGlzdG9yeSA9IGZ1bmN0aW9uIChzdHJQcmljZSwgc3RyVGltZSkge1xyXG4gICAgICAgIHZhciBvU3RvY2tSb3cgPSB0aGlzO1xyXG4gICAgICAgIGlmICghb1N0b2NrUm93LmxzdEhpc3Rvcnlbb1N0b2NrUm93LmxzdEhpc3RvcnkubGVuZ3RoIC0gMV1cclxuICAgICAgICAgICAgfHwgKG9TdG9ja1Jvdy5sc3RIaXN0b3J5W29TdG9ja1Jvdy5sc3RIaXN0b3J5Lmxlbmd0aCAtIDFdXHJcbiAgICAgICAgICAgICAgICAmJiBvU3RvY2tSb3cubHN0SGlzdG9yeVtvU3RvY2tSb3cubHN0SGlzdG9yeS5sZW5ndGggLSAxXVswXSAhPSBvU3RvY2tSb3cucHJpY2UpKVxyXG4gICAgICAgICAgICBvU3RvY2tSb3cubHN0SGlzdG9yeS5wdXNoKFtvU3RvY2tSb3cucHJpY2UsIG9TdG9ja1Jvdy51cGRhdGVUaW1lXSk7XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgcmV0dXJuIHRpbWUgZGlmZmVyZW5jZSBvZiBsYXN0IHVwZGF0ZWQgdGltZSBhbmQgY3VycmVudCB0aW1lIGluIG1pbGxpc2Vjb25kcy5cclxuICAgIFN0b2NrUm93LnByb3RvdHlwZS5nZXRMYXN0VXBkYXRlZFRpbWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9TdG9ja1JvdyA9IHRoaXM7XHJcbiAgICAgICAgdmFyIHRpbWVEaWZmID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBvU3RvY2tSb3cubHN0SGlzdG9yeVtvU3RvY2tSb3cubHN0SGlzdG9yeS5sZW5ndGggLSAxXVsxXS5nZXRUaW1lKCk7XHJcbiAgICAgICAgcmV0dXJuIHRpbWVEaWZmLnRvU3RyaW5nKCk7XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN0b2NrUm93O1xyXG59KCkpO1xyXG5cclxuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gYnVuZGxlLmpzIiwiIFx0ZnVuY3Rpb24gaG90RGlzcG9zZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0ZGVsZXRlIGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdH1cbiBcdHZhciBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayA9IHRoaXNbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0dGhpc1tcIndlYnBhY2tIb3RVcGRhdGVcIl0gPSBcclxuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHRob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XHJcbiBcdFx0aWYocGFyZW50SG90VXBkYXRlQ2FsbGJhY2spIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcclxuIFx0fSA7XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xyXG4gXHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xyXG4gXHRcdHNjcmlwdC50eXBlID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcclxuIFx0XHRzY3JpcHQuY2hhcnNldCA9IFwidXRmLThcIjtcclxuIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xyXG4gXHRcdDtcclxuIFx0XHRoZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcdHJlcXVlc3RUaW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQgfHwgMTAwMDA7XHJcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gXHRcdFx0aWYodHlwZW9mIFhNTEh0dHBSZXF1ZXN0ID09PSBcInVuZGVmaW5lZFwiKVxyXG4gXHRcdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBFcnJvcihcIk5vIGJyb3dzZXIgc3VwcG9ydFwiKSk7XHJcbiBcdFx0XHR0cnkge1xyXG4gXHRcdFx0XHR2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcclxuIFx0XHRcdFx0cmVxdWVzdC5vcGVuKFwiR0VUXCIsIHJlcXVlc3RQYXRoLCB0cnVlKTtcclxuIFx0XHRcdFx0cmVxdWVzdC50aW1lb3V0ID0gcmVxdWVzdFRpbWVvdXQ7XHJcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcclxuIFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcclxuIFx0XHRcdH1cclxuIFx0XHRcdHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiBcdFx0XHRcdGlmKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xyXG4gXHRcdFx0XHRpZihyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xyXG4gXHRcdFx0XHRcdC8vIHRpbWVvdXRcclxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgdGltZWQgb3V0LlwiKSk7XHJcbiBcdFx0XHRcdH0gZWxzZSBpZihyZXF1ZXN0LnN0YXR1cyA9PT0gNDA0KSB7XHJcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxyXG4gXHRcdFx0XHRcdHJlc29sdmUoKTtcclxuIFx0XHRcdFx0fSBlbHNlIGlmKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xyXG4gXHRcdFx0XHRcdC8vIG90aGVyIGZhaWx1cmVcclxuIFx0XHRcdFx0XHRyZWplY3QobmV3IEVycm9yKFwiTWFuaWZlc3QgcmVxdWVzdCB0byBcIiArIHJlcXVlc3RQYXRoICsgXCIgZmFpbGVkLlwiKSk7XHJcbiBcdFx0XHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRcdFx0Ly8gc3VjY2Vzc1xyXG4gXHRcdFx0XHRcdHRyeSB7XHJcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XHJcbiBcdFx0XHRcdFx0fSBjYXRjaChlKSB7XHJcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XHJcbiBcdFx0XHRcdFx0XHRyZXR1cm47XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fTtcclxuIFx0XHR9KTtcclxuIFx0fVxyXG5cbiBcdFxyXG4gXHRcclxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xyXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcIjI2NGE3MjI5OTIyM2VhN2IxMDA0XCI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0dmFyIGhvdFJlcXVlc3RUaW1lb3V0ID0gMTAwMDA7XHJcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xyXG4gXHR2YXIgaG90Q3VycmVudENoaWxkTW9kdWxlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdHZhciBob3RDdXJyZW50UGFyZW50cyA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFx0dmFyIG1lID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFx0aWYoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcclxuIFx0XHR2YXIgZm4gPSBmdW5jdGlvbihyZXF1ZXN0KSB7XHJcbiBcdFx0XHRpZihtZS5ob3QuYWN0aXZlKSB7XHJcbiBcdFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0pIHtcclxuIFx0XHRcdFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCkgPCAwKVxyXG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLnB1c2gobW9kdWxlSWQpO1xyXG4gXHRcdFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGlmKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPCAwKVxyXG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XHJcbiBcdFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXF1ZXN0ICsgXCIpIGZyb20gZGlzcG9zZWQgbW9kdWxlIFwiICsgbW9kdWxlSWQpO1xyXG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xyXG4gXHRcdFx0fVxyXG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18ocmVxdWVzdCk7XHJcbiBcdFx0fTtcclxuIFx0XHR2YXIgT2JqZWN0RmFjdG9yeSA9IGZ1bmN0aW9uIE9iamVjdEZhY3RvcnkobmFtZSkge1xyXG4gXHRcdFx0cmV0dXJuIHtcclxuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxyXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG4gXHRcdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xyXG4gXHRcdFx0XHR9LFxyXG4gXHRcdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9O1xyXG4gXHRcdH07XHJcbiBcdFx0Zm9yKHZhciBuYW1lIGluIF9fd2VicGFja19yZXF1aXJlX18pIHtcclxuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJiBuYW1lICE9PSBcImVcIikge1xyXG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xyXG4gXHRcdFx0aWYoaG90U3RhdHVzID09PSBcInJlYWR5XCIpXHJcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcInByZXBhcmVcIik7XHJcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XHJcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5lKGNodW5rSWQpLnRoZW4oZmluaXNoQ2h1bmtMb2FkaW5nLCBmdW5jdGlvbihlcnIpIHtcclxuIFx0XHRcdFx0ZmluaXNoQ2h1bmtMb2FkaW5nKCk7XHJcbiBcdFx0XHRcdHRocm93IGVycjtcclxuIFx0XHRcdH0pO1xyXG4gXHRcclxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcclxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZy0tO1xyXG4gXHRcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XHJcbiBcdFx0XHRcdFx0aWYoIWhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSkge1xyXG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdGlmKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XHJcbiBcdFx0XHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFx0fTtcclxuIFx0XHRyZXR1cm4gZm47XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFx0dmFyIGhvdCA9IHtcclxuIFx0XHRcdC8vIHByaXZhdGUgc3R1ZmZcclxuIFx0XHRcdF9hY2NlcHRlZERlcGVuZGVuY2llczoge30sXHJcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxyXG4gXHRcdFx0X3NlbGZBY2NlcHRlZDogZmFsc2UsXHJcbiBcdFx0XHRfc2VsZkRlY2xpbmVkOiBmYWxzZSxcclxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxyXG4gXHRcdFx0X21haW46IGhvdEN1cnJlbnRDaGlsZE1vZHVsZSAhPT0gbW9kdWxlSWQsXHJcbiBcdFxyXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxyXG4gXHRcdFx0YWN0aXZlOiB0cnVlLFxyXG4gXHRcdFx0YWNjZXB0OiBmdW5jdGlvbihkZXAsIGNhbGxiYWNrKSB7XHJcbiBcdFx0XHRcdGlmKHR5cGVvZiBkZXAgPT09IFwidW5kZWZpbmVkXCIpXHJcbiBcdFx0XHRcdFx0aG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xyXG4gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwiZnVuY3Rpb25cIilcclxuIFx0XHRcdFx0XHRob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcclxuIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxyXG4gXHRcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXHJcbiBcdFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xyXG4gXHRcdFx0XHRlbHNlXHJcbiBcdFx0XHRcdFx0aG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBdID0gY2FsbGJhY2sgfHwgZnVuY3Rpb24oKSB7fTtcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcclxuIFx0XHRcdFx0aWYodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIilcclxuIFx0XHRcdFx0XHRob3QuX3NlbGZEZWNsaW5lZCA9IHRydWU7XHJcbiBcdFx0XHRcdGVsc2UgaWYodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcclxuIFx0XHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxyXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcclxuIFx0XHRcdFx0ZWxzZVxyXG4gXHRcdFx0XHRcdGhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbZGVwXSA9IHRydWU7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0ZGlzcG9zZTogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0YWRkRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiBcdFx0XHRcdGhvdC5fZGlzcG9zZUhhbmRsZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdHJlbW92ZURpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90Ll9kaXNwb3NlSGFuZGxlcnMuaW5kZXhPZihjYWxsYmFjayk7XHJcbiBcdFx0XHRcdGlmKGlkeCA+PSAwKSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcclxuIFx0XHRcdH0sXHJcbiBcdFxyXG4gXHRcdFx0Ly8gTWFuYWdlbWVudCBBUElcclxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcclxuIFx0XHRcdGFwcGx5OiBob3RBcHBseSxcclxuIFx0XHRcdHN0YXR1czogZnVuY3Rpb24obCkge1xyXG4gXHRcdFx0XHRpZighbCkgcmV0dXJuIGhvdFN0YXR1cztcclxuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRhZGRTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XHJcbiBcdFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzLnB1c2gobCk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0cmVtb3ZlU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xyXG4gXHRcdFx0XHR2YXIgaWR4ID0gaG90U3RhdHVzSGFuZGxlcnMuaW5kZXhPZihsKTtcclxuIFx0XHRcdFx0aWYoaWR4ID49IDApIGhvdFN0YXR1c0hhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gXHRcdFx0fSxcclxuIFx0XHJcbiBcdFx0XHQvL2luaGVyaXQgZnJvbSBwcmV2aW91cyBkaXNwb3NlIGNhbGxcclxuIFx0XHRcdGRhdGE6IGhvdEN1cnJlbnRNb2R1bGVEYXRhW21vZHVsZUlkXVxyXG4gXHRcdH07XHJcbiBcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gdW5kZWZpbmVkO1xyXG4gXHRcdHJldHVybiBob3Q7XHJcbiBcdH1cclxuIFx0XHJcbiBcdHZhciBob3RTdGF0dXNIYW5kbGVycyA9IFtdO1xyXG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RTZXRTdGF0dXMobmV3U3RhdHVzKSB7XHJcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xyXG4gXHRcdGZvcih2YXIgaSA9IDA7IGkgPCBob3RTdGF0dXNIYW5kbGVycy5sZW5ndGg7IGkrKylcclxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcclxuIFx0fVxyXG4gXHRcclxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcclxuIFx0dmFyIGhvdFdhaXRpbmdGaWxlcyA9IDA7XHJcbiBcdHZhciBob3RDaHVua3NMb2FkaW5nID0gMDtcclxuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xyXG4gXHR2YXIgaG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcclxuIFx0dmFyIGhvdEF2YWlsYWJsZUZpbGVzTWFwID0ge307XHJcbiBcdHZhciBob3REZWZlcnJlZDtcclxuIFx0XHJcbiBcdC8vIFRoZSB1cGRhdGUgaW5mb1xyXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoO1xyXG4gXHRcclxuIFx0ZnVuY3Rpb24gdG9Nb2R1bGVJZChpZCkge1xyXG4gXHRcdHZhciBpc051bWJlciA9ICgraWQpICsgXCJcIiA9PT0gaWQ7XHJcbiBcdFx0cmV0dXJuIGlzTnVtYmVyID8gK2lkIDogaWQ7XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdENoZWNrKGFwcGx5KSB7XHJcbiBcdFx0aWYoaG90U3RhdHVzICE9PSBcImlkbGVcIikgdGhyb3cgbmV3IEVycm9yKFwiY2hlY2soKSBpcyBvbmx5IGFsbG93ZWQgaW4gaWRsZSBzdGF0dXNcIik7XHJcbiBcdFx0aG90QXBwbHlPblVwZGF0ZSA9IGFwcGx5O1xyXG4gXHRcdGhvdFNldFN0YXR1cyhcImNoZWNrXCIpO1xyXG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xyXG4gXHRcdFx0aWYoIXVwZGF0ZSkge1xyXG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xyXG4gXHRcdFx0XHRyZXR1cm4gbnVsbDtcclxuIFx0XHRcdH1cclxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XHJcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXAgPSB7fTtcclxuIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XHJcbiBcdFx0XHRob3RVcGRhdGVOZXdIYXNoID0gdXBkYXRlLmg7XHJcbiBcdFxyXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcclxuIFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiBcdFx0XHRcdGhvdERlZmVycmVkID0ge1xyXG4gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXHJcbiBcdFx0XHRcdFx0cmVqZWN0OiByZWplY3RcclxuIFx0XHRcdFx0fTtcclxuIFx0XHRcdH0pO1xyXG4gXHRcdFx0aG90VXBkYXRlID0ge307XHJcbiBcdFx0XHR2YXIgY2h1bmtJZCA9IDA7XHJcbiBcdFx0XHR7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZS1ibG9ja3NcclxuIFx0XHRcdFx0LypnbG9iYWxzIGNodW5rSWQgKi9cclxuIFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XHJcbiBcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcclxuIFx0XHRcdH1cclxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xyXG4gXHRcdH0pO1xyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFx0aWYoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcclxuIFx0XHRcdHJldHVybjtcclxuIFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSA9IGZhbHNlO1xyXG4gXHRcdGZvcih2YXIgbW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcclxuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XHJcbiBcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcdGlmKC0taG90V2FpdGluZ0ZpbGVzID09PSAwICYmIGhvdENodW5rc0xvYWRpbmcgPT09IDApIHtcclxuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcclxuIFx0XHR9XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdEVuc3VyZVVwZGF0ZUNodW5rKGNodW5rSWQpIHtcclxuIFx0XHRpZighaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcclxuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcFtjaHVua0lkXSA9IHRydWU7XHJcbiBcdFx0fSBlbHNlIHtcclxuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcclxuIFx0XHRcdGhvdFdhaXRpbmdGaWxlcysrO1xyXG4gXHRcdFx0aG90RG93bmxvYWRVcGRhdGVDaHVuayhjaHVua0lkKTtcclxuIFx0XHR9XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XHJcbiBcdFx0aG90U2V0U3RhdHVzKFwicmVhZHlcIik7XHJcbiBcdFx0dmFyIGRlZmVycmVkID0gaG90RGVmZXJyZWQ7XHJcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xyXG4gXHRcdGlmKCFkZWZlcnJlZCkgcmV0dXJuO1xyXG4gXHRcdGlmKGhvdEFwcGx5T25VcGRhdGUpIHtcclxuIFx0XHRcdC8vIFdyYXAgZGVmZXJyZWQgb2JqZWN0IGluIFByb21pc2UgdG8gbWFyayBpdCBhcyBhIHdlbGwtaGFuZGxlZCBQcm9taXNlIHRvXHJcbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cclxuIFx0XHRcdC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NjU2NjZcclxuIFx0XHRcdFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiBcdFx0XHRcdHJldHVybiBob3RBcHBseShob3RBcHBseU9uVXBkYXRlKTtcclxuIFx0XHRcdH0pLnRoZW4oXHJcbiBcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcclxuIFx0XHRcdFx0fSxcclxuIFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XHJcbiBcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdCk7XHJcbiBcdFx0fSBlbHNlIHtcclxuIFx0XHRcdHZhciBvdXRkYXRlZE1vZHVsZXMgPSBbXTtcclxuIFx0XHRcdGZvcih2YXIgaWQgaW4gaG90VXBkYXRlKSB7XHJcbiBcdFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xyXG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHRvTW9kdWxlSWQoaWQpKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShvdXRkYXRlZE1vZHVsZXMpO1xyXG4gXHRcdH1cclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90QXBwbHkob3B0aW9ucykge1xyXG4gXHRcdGlmKGhvdFN0YXR1cyAhPT0gXCJyZWFkeVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XHJcbiBcdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiBcdFxyXG4gXHRcdHZhciBjYjtcclxuIFx0XHR2YXIgaTtcclxuIFx0XHR2YXIgajtcclxuIFx0XHR2YXIgbW9kdWxlO1xyXG4gXHRcdHZhciBtb2R1bGVJZDtcclxuIFx0XHJcbiBcdFx0ZnVuY3Rpb24gZ2V0QWZmZWN0ZWRTdHVmZih1cGRhdGVNb2R1bGVJZCkge1xyXG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XHJcbiBcdFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcclxuIFx0XHJcbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKS5tYXAoZnVuY3Rpb24oaWQpIHtcclxuIFx0XHRcdFx0cmV0dXJuIHtcclxuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcclxuIFx0XHRcdFx0XHRpZDogaWRcclxuIFx0XHRcdFx0fTtcclxuIFx0XHRcdH0pO1xyXG4gXHRcdFx0d2hpbGUocXVldWUubGVuZ3RoID4gMCkge1xyXG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XHJcbiBcdFx0XHRcdHZhciBtb2R1bGVJZCA9IHF1ZXVlSXRlbS5pZDtcclxuIFx0XHRcdFx0dmFyIGNoYWluID0gcXVldWVJdGVtLmNoYWluO1xyXG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0aWYoIW1vZHVsZSB8fCBtb2R1bGUuaG90Ll9zZWxmQWNjZXB0ZWQpXHJcbiBcdFx0XHRcdFx0Y29udGludWU7XHJcbiBcdFx0XHRcdGlmKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xyXG4gXHRcdFx0XHRcdHJldHVybiB7XHJcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtZGVjbGluZWRcIixcclxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcclxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxyXG4gXHRcdFx0XHRcdH07XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0aWYobW9kdWxlLmhvdC5fbWFpbikge1xyXG4gXHRcdFx0XHRcdHJldHVybiB7XHJcbiBcdFx0XHRcdFx0XHR0eXBlOiBcInVuYWNjZXB0ZWRcIixcclxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcclxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxyXG4gXHRcdFx0XHRcdH07XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IG1vZHVsZS5wYXJlbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiBcdFx0XHRcdFx0dmFyIHBhcmVudElkID0gbW9kdWxlLnBhcmVudHNbaV07XHJcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xyXG4gXHRcdFx0XHRcdGlmKCFwYXJlbnQpIGNvbnRpbnVlO1xyXG4gXHRcdFx0XHRcdGlmKHBhcmVudC5ob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xyXG4gXHRcdFx0XHRcdFx0cmV0dXJuIHtcclxuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxyXG4gXHRcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxyXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXHJcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxyXG4gXHRcdFx0XHRcdFx0fTtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0aWYob3V0ZGF0ZWRNb2R1bGVzLmluZGV4T2YocGFyZW50SWQpID49IDApIGNvbnRpbnVlO1xyXG4gXHRcdFx0XHRcdGlmKHBhcmVudC5ob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSkge1xyXG4gXHRcdFx0XHRcdFx0aWYoIW91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSlcclxuIFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdID0gW107XHJcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xyXG4gXHRcdFx0XHRcdFx0Y29udGludWU7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XHJcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2gocGFyZW50SWQpO1xyXG4gXHRcdFx0XHRcdHF1ZXVlLnB1c2goe1xyXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcclxuIFx0XHRcdFx0XHRcdGlkOiBwYXJlbnRJZFxyXG4gXHRcdFx0XHRcdH0pO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFxyXG4gXHRcdFx0cmV0dXJuIHtcclxuIFx0XHRcdFx0dHlwZTogXCJhY2NlcHRlZFwiLFxyXG4gXHRcdFx0XHRtb2R1bGVJZDogdXBkYXRlTW9kdWxlSWQsXHJcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxyXG4gXHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llczogb3V0ZGF0ZWREZXBlbmRlbmNpZXNcclxuIFx0XHRcdH07XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHRmdW5jdGlvbiBhZGRBbGxUb1NldChhLCBiKSB7XHJcbiBcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgYi5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0XHR2YXIgaXRlbSA9IGJbaV07XHJcbiBcdFx0XHRcdGlmKGEuaW5kZXhPZihpdGVtKSA8IDApXHJcbiBcdFx0XHRcdFx0YS5wdXNoKGl0ZW0pO1xyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcclxuIFx0XHQvLyB0aGUgXCJvdXRkYXRlZFwiIHN0YXR1cyBjYW4gcHJvcGFnYXRlIHRvIHBhcmVudHMgaWYgdGhleSBkb24ndCBhY2NlcHQgdGhlIGNoaWxkcmVuXHJcbiBcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XHJcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xyXG4gXHRcdHZhciBhcHBsaWVkVXBkYXRlID0ge307XHJcbiBcdFxyXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XHJcbiBcdFx0XHRjb25zb2xlLndhcm4oXCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCIpO1xyXG4gXHRcdH07XHJcbiBcdFxyXG4gXHRcdGZvcih2YXIgaWQgaW4gaG90VXBkYXRlKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcclxuIFx0XHRcdFx0bW9kdWxlSWQgPSB0b01vZHVsZUlkKGlkKTtcclxuIFx0XHRcdFx0dmFyIHJlc3VsdDtcclxuIFx0XHRcdFx0aWYoaG90VXBkYXRlW2lkXSkge1xyXG4gXHRcdFx0XHRcdHJlc3VsdCA9IGdldEFmZmVjdGVkU3R1ZmYobW9kdWxlSWQpO1xyXG4gXHRcdFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0XHRcdHJlc3VsdCA9IHtcclxuIFx0XHRcdFx0XHRcdHR5cGU6IFwiZGlzcG9zZWRcIixcclxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxyXG4gXHRcdFx0XHRcdH07XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0dmFyIGFib3J0RXJyb3IgPSBmYWxzZTtcclxuIFx0XHRcdFx0dmFyIGRvQXBwbHkgPSBmYWxzZTtcclxuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xyXG4gXHRcdFx0XHR2YXIgY2hhaW5JbmZvID0gXCJcIjtcclxuIFx0XHRcdFx0aWYocmVzdWx0LmNoYWluKSB7XHJcbiBcdFx0XHRcdFx0Y2hhaW5JbmZvID0gXCJcXG5VcGRhdGUgcHJvcGFnYXRpb246IFwiICsgcmVzdWx0LmNoYWluLmpvaW4oXCIgLT4gXCIpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdHN3aXRjaChyZXN1bHQudHlwZSkge1xyXG4gXHRcdFx0XHRcdGNhc2UgXCJzZWxmLWRlY2xpbmVkXCI6XHJcbiBcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uRGVjbGluZWQpXHJcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25EZWNsaW5lZChyZXN1bHQpO1xyXG4gXHRcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXHJcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2Ugb2Ygc2VsZiBkZWNsaW5lOiBcIiArIHJlc3VsdC5tb2R1bGVJZCArIGNoYWluSW5mbyk7XHJcbiBcdFx0XHRcdFx0XHRicmVhaztcclxuIFx0XHRcdFx0XHRjYXNlIFwiZGVjbGluZWRcIjpcclxuIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25EZWNsaW5lZClcclxuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XHJcbiBcdFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcclxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBvZiBkZWNsaW5lZCBkZXBlbmRlbmN5OiBcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiIGluIFwiICsgcmVzdWx0LnBhcmVudElkICsgY2hhaW5JbmZvKTtcclxuIFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4gXHRcdFx0XHRcdGNhc2UgXCJ1bmFjY2VwdGVkXCI6XHJcbiBcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uVW5hY2NlcHRlZClcclxuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcclxuIFx0XHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZVVuYWNjZXB0ZWQpXHJcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXCJBYm9ydGVkIGJlY2F1c2UgXCIgKyBtb2R1bGVJZCArIFwiIGlzIG5vdCBhY2NlcHRlZFwiICsgY2hhaW5JbmZvKTtcclxuIFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4gXHRcdFx0XHRcdGNhc2UgXCJhY2NlcHRlZFwiOlxyXG4gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkFjY2VwdGVkKVxyXG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uQWNjZXB0ZWQocmVzdWx0KTtcclxuIFx0XHRcdFx0XHRcdGRvQXBwbHkgPSB0cnVlO1xyXG4gXHRcdFx0XHRcdFx0YnJlYWs7XHJcbiBcdFx0XHRcdFx0Y2FzZSBcImRpc3Bvc2VkXCI6XHJcbiBcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uRGlzcG9zZWQpXHJcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xyXG4gXHRcdFx0XHRcdFx0ZG9EaXNwb3NlID0gdHJ1ZTtcclxuIFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4gXHRcdFx0XHRcdGRlZmF1bHQ6XHJcbiBcdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJVbmV4Y2VwdGlvbiB0eXBlIFwiICsgcmVzdWx0LnR5cGUpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGlmKGFib3J0RXJyb3IpIHtcclxuIFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJhYm9ydFwiKTtcclxuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0aWYoZG9BcHBseSkge1xyXG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gaG90VXBkYXRlW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIHJlc3VsdC5vdXRkYXRlZE1vZHVsZXMpO1xyXG4gXHRcdFx0XHRcdGZvcihtb2R1bGVJZCBpbiByZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcclxuIFx0XHRcdFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xyXG4gXHRcdFx0XHRcdFx0XHRpZighb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKVxyXG4gXHRcdFx0XHRcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSA9IFtdO1xyXG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0sIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pO1xyXG4gXHRcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRpZihkb0Rpc3Bvc2UpIHtcclxuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcclxuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IHdhcm5VbmV4cGVjdGVkUmVxdWlyZTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxyXG4gXHRcdHZhciBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMgPSBbXTtcclxuIFx0XHRmb3IoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdG1vZHVsZUlkID0gb3V0ZGF0ZWRNb2R1bGVzW2ldO1xyXG4gXHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gJiYgaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQpXHJcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcclxuIFx0XHRcdFx0XHRtb2R1bGU6IG1vZHVsZUlkLFxyXG4gXHRcdFx0XHRcdGVycm9ySGFuZGxlcjogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWRcclxuIFx0XHRcdFx0fSk7XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcclxuIFx0XHRob3RTZXRTdGF0dXMoXCJkaXNwb3NlXCIpO1xyXG4gXHRcdE9iamVjdC5rZXlzKGhvdEF2YWlsYWJsZUZpbGVzTWFwKS5mb3JFYWNoKGZ1bmN0aW9uKGNodW5rSWQpIHtcclxuIFx0XHRcdGlmKGhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdID09PSBmYWxzZSkge1xyXG4gXHRcdFx0XHRob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0fSk7XHJcbiBcdFxyXG4gXHRcdHZhciBpZHg7XHJcbiBcdFx0dmFyIHF1ZXVlID0gb3V0ZGF0ZWRNb2R1bGVzLnNsaWNlKCk7XHJcbiBcdFx0d2hpbGUocXVldWUubGVuZ3RoID4gMCkge1xyXG4gXHRcdFx0bW9kdWxlSWQgPSBxdWV1ZS5wb3AoKTtcclxuIFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0aWYoIW1vZHVsZSkgY29udGludWU7XHJcbiBcdFxyXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcclxuIFx0XHJcbiBcdFx0XHQvLyBDYWxsIGRpc3Bvc2UgaGFuZGxlcnNcclxuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XHJcbiBcdFx0XHRmb3IoaiA9IDA7IGogPCBkaXNwb3NlSGFuZGxlcnMubGVuZ3RoOyBqKyspIHtcclxuIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XHJcbiBcdFx0XHRcdGNiKGRhdGEpO1xyXG4gXHRcdFx0fVxyXG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcclxuIFx0XHJcbiBcdFx0XHQvLyBkaXNhYmxlIG1vZHVsZSAodGhpcyBkaXNhYmxlcyByZXF1aXJlcyBmcm9tIHRoaXMgbW9kdWxlKVxyXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcclxuIFx0XHJcbiBcdFx0XHQvLyByZW1vdmUgbW9kdWxlIGZyb20gY2FjaGVcclxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHJcbiBcdFx0XHQvLyB3aGVuIGRpc3Bvc2luZyB0aGVyZSBpcyBubyBuZWVkIHRvIGNhbGwgZGlzcG9zZSBoYW5kbGVyXHJcbiBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xyXG4gXHRcclxuIFx0XHRcdC8vIHJlbW92ZSBcInBhcmVudHNcIiByZWZlcmVuY2VzIGZyb20gYWxsIGNoaWxkcmVuXHJcbiBcdFx0XHRmb3IoaiA9IDA7IGogPCBtb2R1bGUuY2hpbGRyZW4ubGVuZ3RoOyBqKyspIHtcclxuIFx0XHRcdFx0dmFyIGNoaWxkID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGUuY2hpbGRyZW5bal1dO1xyXG4gXHRcdFx0XHRpZighY2hpbGQpIGNvbnRpbnVlO1xyXG4gXHRcdFx0XHRpZHggPSBjaGlsZC5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpO1xyXG4gXHRcdFx0XHRpZihpZHggPj0gMCkge1xyXG4gXHRcdFx0XHRcdGNoaWxkLnBhcmVudHMuc3BsaWNlKGlkeCwgMSk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIHJlbW92ZSBvdXRkYXRlZCBkZXBlbmRlbmN5IGZyb20gbW9kdWxlIGNoaWxkcmVuXHJcbiBcdFx0dmFyIGRlcGVuZGVuY3k7XHJcbiBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xyXG4gXHRcdGZvcihtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcclxuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFx0XHRcdGlmKG1vZHVsZSkge1xyXG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHRcdGZvcihqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XHJcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbal07XHJcbiBcdFx0XHRcdFx0XHRpZHggPSBtb2R1bGUuY2hpbGRyZW4uaW5kZXhPZihkZXBlbmRlbmN5KTtcclxuIFx0XHRcdFx0XHRcdGlmKGlkeCA+PSAwKSBtb2R1bGUuY2hpbGRyZW4uc3BsaWNlKGlkeCwgMSk7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBOb3QgaW4gXCJhcHBseVwiIHBoYXNlXHJcbiBcdFx0aG90U2V0U3RhdHVzKFwiYXBwbHlcIik7XHJcbiBcdFxyXG4gXHRcdGhvdEN1cnJlbnRIYXNoID0gaG90VXBkYXRlTmV3SGFzaDtcclxuIFx0XHJcbiBcdFx0Ly8gaW5zZXJ0IG5ldyBjb2RlXHJcbiBcdFx0Zm9yKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcclxuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhcHBsaWVkVXBkYXRlLCBtb2R1bGVJZCkpIHtcclxuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIGNhbGwgYWNjZXB0IGhhbmRsZXJzXHJcbiBcdFx0dmFyIGVycm9yID0gbnVsbDtcclxuIFx0XHRmb3IobW9kdWxlSWQgaW4gb3V0ZGF0ZWREZXBlbmRlbmNpZXMpIHtcclxuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XHJcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHRpZihtb2R1bGUpIHtcclxuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gW107XHJcbiBcdFx0XHRcdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXTtcclxuIFx0XHRcdFx0XHRcdGNiID0gbW9kdWxlLmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwZW5kZW5jeV07XHJcbiBcdFx0XHRcdFx0XHRpZihjYikge1xyXG4gXHRcdFx0XHRcdFx0XHRpZihjYWxsYmFja3MuaW5kZXhPZihjYikgPj0gMCkgY29udGludWU7XHJcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcclxuIFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0Zm9yKGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiBcdFx0XHRcdFx0XHRjYiA9IGNhbGxiYWNrc1tpXTtcclxuIFx0XHRcdFx0XHRcdHRyeSB7XHJcbiBcdFx0XHRcdFx0XHRcdGNiKG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzKTtcclxuIFx0XHRcdFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbiBcdFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25FcnJvcmVkKSB7XHJcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xyXG4gXHRcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJhY2NlcHQtZXJyb3JlZFwiLFxyXG4gXHRcdFx0XHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkLFxyXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcclxuIFx0XHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcclxuIFx0XHRcdFx0XHRcdFx0XHR9KTtcclxuIFx0XHRcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XHJcbiBcdFx0XHRcdFx0XHRcdFx0aWYoIWVycm9yKVxyXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbiBcdFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIExvYWQgc2VsZiBhY2NlcHRlZCBtb2R1bGVzXHJcbiBcdFx0Zm9yKGkgPSAwOyBpIDwgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcbiBcdFx0XHR2YXIgaXRlbSA9IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlc1tpXTtcclxuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XHJcbiBcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFttb2R1bGVJZF07XHJcbiBcdFx0XHR0cnkge1xyXG4gXHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKTtcclxuIFx0XHRcdH0gY2F0Y2goZXJyKSB7XHJcbiBcdFx0XHRcdGlmKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiBcdFx0XHRcdFx0dHJ5IHtcclxuIFx0XHRcdFx0XHRcdGl0ZW0uZXJyb3JIYW5kbGVyKGVycik7XHJcbiBcdFx0XHRcdFx0fSBjYXRjaChlcnIyKSB7XHJcbiBcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uRXJyb3JlZCkge1xyXG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XHJcbiBcdFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvci1oYW5kbGVyLWVycm9yZWRcIixcclxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXHJcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVycjIsXHJcbiBcdFx0XHRcdFx0XHRcdFx0b3JnaW5hbEVycm9yOiBlcnIsIC8vIFRPRE8gcmVtb3ZlIGluIHdlYnBhY2sgNFxyXG4gXHRcdFx0XHRcdFx0XHRcdG9yaWdpbmFsRXJyb3I6IGVyclxyXG4gXHRcdFx0XHRcdFx0XHR9KTtcclxuIFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcclxuIFx0XHRcdFx0XHRcdFx0aWYoIWVycm9yKVxyXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyMjtcclxuIFx0XHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuIFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0XHRcdGlmKG9wdGlvbnMub25FcnJvcmVkKSB7XHJcbiBcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XHJcbiBcdFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1hY2NlcHQtZXJyb3JlZFwiLFxyXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXHJcbiBcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnJcclxuIFx0XHRcdFx0XHRcdH0pO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVFcnJvcmVkKSB7XHJcbiBcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbiBcdFx0XHRcdFx0XHRcdGVycm9yID0gZXJyO1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gaGFuZGxlIGVycm9ycyBpbiBhY2NlcHQgaGFuZGxlcnMgYW5kIHNlbGYgYWNjZXB0ZWQgbW9kdWxlIGxvYWRcclxuIFx0XHRpZihlcnJvcikge1xyXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwiZmFpbFwiKTtcclxuIFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xyXG4gXHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlKSB7XHJcbiBcdFx0XHRyZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XHJcbiBcdFx0fSk7XHJcbiBcdH1cclxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRob3Q6IGhvdENyZWF0ZU1vZHVsZShtb2R1bGVJZCksXG4gXHRcdFx0cGFyZW50czogKGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IGhvdEN1cnJlbnRQYXJlbnRzLCBob3RDdXJyZW50UGFyZW50cyA9IFtdLCBob3RDdXJyZW50UGFyZW50c1RlbXApLFxuIFx0XHRcdGNoaWxkcmVuOiBbXVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoMCkoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMjY0YTcyMjk5MjIzZWE3YjEwMDQiLCJpbXBvcnQgeyBFbmdpbmUgfSBmcm9tIFwiLi9lbmdpbmUvZW5naW5lXCI7XHJcbnZhciBBcHBsaWNhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIEFwcGxpY2F0aW9uKCkge1xyXG4gICAgICAgIC8vLyBJdCB3aWxsIGNyZWF0ZSBFbmdpbmUgb2JqZWN0IGFuZCBhcHBlbmQgdGhhdCB0byBhcHBsaWNhdGlvbiBpbiBkb20uXHJcbiAgICAgICAgdmFyIG9FbmdpbmUgPSBuZXcgRW5naW5lKCk7XHJcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHBcIikuYXBwZW5kQ2hpbGQob0VuZ2luZS5zdGFydCgpKTtcclxuICAgIH1cclxuICAgIHJldHVybiBBcHBsaWNhdGlvbjtcclxufSgpKTtcclxuZXhwb3J0IHsgQXBwbGljYXRpb24gfTtcclxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBhID0gbmV3IEFwcGxpY2F0aW9uKCk7IC8vLyBBcHBsaWNhdGlvbiBzdGFydHMgZnJvbSBoZXJlLlxyXG59O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9hcHAudHNcbi8vIG1vZHVsZSBpZCA9IDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiaW1wb3J0IHsgV2ViU29ja2V0SGVscGVyIH0gZnJvbSBcIi4uL3dlYnNvY2tldGhlbHBlci93ZWJzb2NrZXRoZWxwZXJcIjtcclxuaW1wb3J0IHsgSE9TVF9VUkwgfSBmcm9tIFwiLi4vY29uc3RhbnRzL2NvbnN0YW50c1wiO1xyXG5pbXBvcnQgeyBTdG9ja1RhYmxlIH0gZnJvbSBcIi4uL3N0b2NrdGFibGUvc3RvY2t0YWJsZVwiO1xyXG52YXIgRW5naW5lID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gRW5naW5lKCkge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLmVsbUFwcFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgxXCIpO1xyXG4gICAgICAgIHRoaXMuYkFwcExvYWRlZCA9IGZhbHNlO1xyXG4gICAgICAgIC8vLyBIYW5kbGVyIHRvIGhhbmRsZSBjb25uZWN0aW9uIG9wZW4uXHJcbiAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25PcGVuID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29ubmVjdGlvbiBlc3RhYmxpc2hlZCBzdWNjZXNzZnVsbHlcIik7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLy8gSGFuZGxlciB3aWxsIGV4ZWN1dGUgZWFjaCB0aW1lIHdlYnNvY2tldCBzZW5kIG1lc3NhZ2UuXHJcbiAgICAgICAgdGhpcy5vbkNvbm5lY3Rpb25NZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIHZhciBvRW5naW5lID0gX3RoaXM7XHJcbiAgICAgICAgICAgIG9FbmdpbmUuc2hvd0FwcGxpY2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmICghb0VuZ2luZS5vU3RvY2tUYWJsZSkge1xyXG4gICAgICAgICAgICAgICAgb0VuZ2luZS5vU3RvY2tUYWJsZSA9IG5ldyBTdG9ja1RhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICBvRW5naW5lLmVsZW1lbnQuYXBwZW5kQ2hpbGQob0VuZ2luZS5vU3RvY2tUYWJsZS5lbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvRW5naW5lLm9TdG9ja1RhYmxlLnNldERhdGEoZXZlbnQuZGF0YSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLy8gSGFuZGxlciB0byBoYW5kbGUgY29ubmVjdGlvbiBjbG9zZS5cclxuICAgICAgICB0aGlzLm9uQ29ubmVjdGlvbkNsb3NlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29ubmVjdGlvbiBjbG9zZWQgc3VjY2Vzc2Z1bGx5XCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8vIEhhbmRsZXIgdG8gaGFuZGxlIGNvbm5lY3Rpb24gZXJyb3JzLlxyXG4gICAgICAgIHRoaXMub25Db25uZWN0aW9uRXJyb3IgPSBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgYWxlcnQoXCJQcm9ibGVtIGNvbm5lY3RpbmcgdG8gc2VydmVyXCIpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIG9FbmdpbmUgPSB0aGlzO1xyXG4gICAgICAgIG9FbmdpbmUuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICAgICAgb0VuZ2luZS5yZW5kZXIoKTtcclxuICAgIH1cclxuICAgIC8vLyBJdCB3aWxsIGNyZWF0ZSBhcHAgdGl0bGUuXHJcbiAgICBFbmdpbmUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb0VuZ2luZSA9IHRoaXM7XHJcbiAgICAgICAgb0VuZ2luZS5lbG1BcHBUaXRsZS5jbGFzc05hbWUgPSBcImFwcC10aXRsZVwiO1xyXG4gICAgICAgIG9FbmdpbmUuZWxtQXBwVGl0bGUuaW5uZXJUZXh0ID0gXCIoTGl2ZSkgU3RvY2tzIEFwcFwiO1xyXG4gICAgICAgIG9FbmdpbmUuZWxlbWVudC5hcHBlbmRDaGlsZChvRW5naW5lLmVsbUFwcFRpdGxlKTtcclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCBjYWxsIHNldGRhdGEgYW5kIHJldHVybiBlbmdpbmUgZWxlbWVudC5cclxuICAgIEVuZ2luZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9FbmdpbmUgPSB0aGlzO1xyXG4gICAgICAgIG9FbmdpbmUuc2V0RGF0YSgpO1xyXG4gICAgICAgIHJldHVybiBvRW5naW5lLmVsZW1lbnQ7XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgcmVxdWVzdCB0byB3ZWJzb2NrZXQgZm9yIHN0b2NrIHByb2NlLlxyXG4gICAgRW5naW5lLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvRW5naW5lID0gdGhpcztcclxuICAgICAgICBXZWJTb2NrZXRIZWxwZXIuZ2V0SW5zdGFuY2UoKS5jcmVhdGUoSE9TVF9VUkwpO1xyXG4gICAgICAgIFdlYlNvY2tldEhlbHBlci5nZXRJbnN0YW5jZSgpLnJlZ2lzdGVyRXZlbnRzKHtcclxuICAgICAgICAgICAgXCJvbkNvbm5lY3Rpb25PcGVuXCI6IG9FbmdpbmUub25Db25uZWN0aW9uT3BlbixcclxuICAgICAgICAgICAgXCJvbkNvbm5lY3Rpb25NZXNzYWdlXCI6IG9FbmdpbmUub25Db25uZWN0aW9uTWVzc2FnZSxcclxuICAgICAgICAgICAgXCJvbkNvbm5lY3Rpb25DbG9zZVwiOiBvRW5naW5lLm9uQ29ubmVjdGlvbkNsb3NlLFxyXG4gICAgICAgICAgICBcIm9uQ29ubmVjdGlvbkVycm9yXCI6IG9FbmdpbmUub25Db25uZWN0aW9uRXJyb3IsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgRW5naW5lLnByb3RvdHlwZS5zaG93QXBwbGljYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9FbmdpbmUgPSB0aGlzO1xyXG4gICAgICAgIGlmICghb0VuZ2luZS5iQXBwTG9hZGVkKSB7XHJcbiAgICAgICAgICAgIG9FbmdpbmUuZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcclxuICAgICAgICAgICAgb0VuZ2luZS5iQXBwTG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhcHAtbG9hZGVyXCIpLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIEVuZ2luZTtcclxufSgpKTtcclxuZXhwb3J0IHsgRW5naW5lIH07XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vYXBwL2VuZ2luZS9lbmdpbmUudHNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8vIENyZWF0ZSBzaW5nbHRvbiBjbGFzcyB0byBzZW5kIHdlYnNvY2tldCByZXF1ZXN0LlxyXG52YXIgV2ViU29ja2V0SGVscGVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gV2ViU29ja2V0SGVscGVyKCkge1xyXG4gICAgfVxyXG4gICAgV2ViU29ja2V0SGVscGVyLmdldEluc3RhbmNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghV2ViU29ja2V0SGVscGVyLmluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgIFdlYlNvY2tldEhlbHBlci5pbnN0YW5jZSA9IG5ldyBXZWJTb2NrZXRIZWxwZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFdlYlNvY2tldEhlbHBlci5pbnN0YW5jZTtcclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCBjcmVhdGUgd2Vic29ja2V0IGNvbm5lY3Rpb24uXHJcbiAgICBXZWJTb2NrZXRIZWxwZXIucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICh1cmwpIHtcclxuICAgICAgICB2YXIgb1dlYlNvY2tldEhlbHBlciA9IHRoaXM7XHJcbiAgICAgICAgb1dlYlNvY2tldEhlbHBlci5vV2ViU29ja2V0ID0gbmV3IFdlYlNvY2tldCh1cmwpO1xyXG4gICAgICAgIHJldHVybiBvV2ViU29ja2V0SGVscGVyLm9XZWJTb2NrZXQ7XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgcmVnaXN0ZXIgd2Vic29ja2V0IGV2ZW50cyBhY2NvcmRpbmcgdG8gZ2l2ZW4gb3B0aW9uIGluIGZvcm0gb2YgSlNPTi5cclxuICAgIFdlYlNvY2tldEhlbHBlci5wcm90b3R5cGUucmVnaXN0ZXJFdmVudHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBvV2ViU29ja2V0SGVscGVyID0gdGhpcztcclxuICAgICAgICBpZiAob3B0aW9uc1tcIm9uQ29ubmVjdGlvbk9wZW5cIl0pIHtcclxuICAgICAgICAgICAgb1dlYlNvY2tldEhlbHBlci5vV2ViU29ja2V0Lm9ub3BlbiA9IG9wdGlvbnNbXCJvbkNvbm5lY3Rpb25PcGVuXCJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9uc1tcIm9uQ29ubmVjdGlvbk1lc3NhZ2VcIl0pIHtcclxuICAgICAgICAgICAgb1dlYlNvY2tldEhlbHBlci5vV2ViU29ja2V0Lm9ubWVzc2FnZSA9IG9wdGlvbnNbXCJvbkNvbm5lY3Rpb25NZXNzYWdlXCJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9uc1tcIm9uQ29ubmVjdGlvbkNsb3NlXCJdKSB7XHJcbiAgICAgICAgICAgIG9XZWJTb2NrZXRIZWxwZXIub1dlYlNvY2tldC5vbmNsb3NlID0gb3B0aW9uc1tcIm9uQ29ubmVjdGlvbkNsb3NlXCJdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9uc1tcIm9uQ29ubmVjdGlvbkVycm9yXCJdKSB7XHJcbiAgICAgICAgICAgIG9XZWJTb2NrZXRIZWxwZXIub1dlYlNvY2tldC5vbmVycm9yID0gb3B0aW9uc1tcIm9uQ29ubmVjdGlvbkVycm9yXCJdO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gV2ViU29ja2V0SGVscGVyO1xyXG59KCkpO1xyXG5leHBvcnQgeyBXZWJTb2NrZXRIZWxwZXIgfTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvd2Vic29ja2V0aGVscGVyL3dlYnNvY2tldGhlbHBlci50c1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgdmFyIEhPU1RfVVJMID0gXCJ3czovL3N0b2Nrcy5tbmV0LndlYnNpdGVcIjtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvY29uc3RhbnRzL2NvbnN0YW50cy50c1xuLy8gbW9kdWxlIGlkID0gNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJpbXBvcnQgeyBTdG9ja01hcCB9IGZyb20gXCIuL3N0b2NrbWFwXCI7XHJcbmltcG9ydCB7IFN0b2NrUm93IH0gZnJvbSBcIi4uL3N0b2Nrcm93L3N0b2Nrcm93XCI7XHJcbnZhciBTdG9ja1RhYmxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xyXG4gICAgZnVuY3Rpb24gU3RvY2tUYWJsZSgpIHtcclxuICAgICAgICB0aGlzLnN0b2NrTWFwID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdGhpcy5zdG9ja1JvdyA9IG5ldyBBcnJheSgpO1xyXG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgdGhpcy5lbG1IZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIHRoaXMuZWxtSGVhZGVyTmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xyXG4gICAgICAgIHRoaXMuZWxtSGVhZGVyUHJpY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICB0aGlzLmVsbUhlYWRlckxhc3RVcGRhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICB2YXIgb1N0b2NrVGFibGUgPSB0aGlzO1xyXG4gICAgICAgIG9TdG9ja1RhYmxlLmVsZW1lbnQuY2xhc3NOYW1lID0gXCJzdG9jay10YWJsZVwiO1xyXG4gICAgICAgIG9TdG9ja1RhYmxlLmVsZW1lbnQuYXBwZW5kQ2hpbGQob1N0b2NrVGFibGUuY3JlYXRlVGFibGVIZWFkZXIoKSk7XHJcbiAgICB9XHJcbiAgICAvLy8gSXQgd2lsbCBjcmVhdGUgaGVhZGVyIG9mIHRhYmxlLiBpLmUuIHwgVGlja2VyIHwgUHJpY2UgfCBMYXN0IFVwZGF0ZSB8XHJcbiAgICBTdG9ja1RhYmxlLnByb3RvdHlwZS5jcmVhdGVUYWJsZUhlYWRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgb1N0b2NrVGFibGUgPSB0aGlzO1xyXG4gICAgICAgIHZhciBlbG1IZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgIGVsbUhlYWRlci5jbGFzc05hbWUgPSBcInN0b2NrLXJvdy1oZWFkZXJcIjtcclxuICAgICAgICBvU3RvY2tUYWJsZS5lbG1IZWFkZXJOYW1lLmlubmVyVGV4dCA9IFwiVGlja2VyXCI7XHJcbiAgICAgICAgb1N0b2NrVGFibGUuZWxtSGVhZGVyUHJpY2UuaW5uZXJUZXh0ID0gXCJQcmljZVwiO1xyXG4gICAgICAgIG9TdG9ja1RhYmxlLmVsbUhlYWRlckxhc3RVcGRhdGUuaW5uZXJUZXh0ID0gXCJMYXN0IFVwZGF0ZVwiO1xyXG4gICAgICAgIG9TdG9ja1RhYmxlLmVsbUhlYWRlck5hbWUuY2xhc3NOYW1lID0gXCJzdG9jay10aWNrZXJcIjtcclxuICAgICAgICBvU3RvY2tUYWJsZS5lbG1IZWFkZXJQcmljZS5jbGFzc05hbWUgPSBcInN0b2NrLXByaWNlXCI7XHJcbiAgICAgICAgb1N0b2NrVGFibGUuZWxtSGVhZGVyTGFzdFVwZGF0ZS5jbGFzc05hbWUgPSBcInN0b2NrLWxhc3QtdXBkYXRlXCI7XHJcbiAgICAgICAgZWxtSGVhZGVyLmFwcGVuZENoaWxkKG9TdG9ja1RhYmxlLmVsbUhlYWRlck5hbWUpO1xyXG4gICAgICAgIGVsbUhlYWRlci5hcHBlbmRDaGlsZChvU3RvY2tUYWJsZS5lbG1IZWFkZXJQcmljZSk7XHJcbiAgICAgICAgZWxtSGVhZGVyLmFwcGVuZENoaWxkKG9TdG9ja1RhYmxlLmVsbUhlYWRlckxhc3RVcGRhdGUpO1xyXG4gICAgICAgIHJldHVybiBlbG1IZWFkZXI7XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgc2V0IGFuZCB1cGRhdGUgc3RvY2sgZGF0YSB0byBzdG9ja3Jvdy4gSWYgc3RvY2sgcm93IGlzIGFscmVhZHkgY3JlYXRlIGZvciBzdG9jayB0aGVuIGl0IHdpbGwganVzdCB1cGRhdGUgaXRcclxuICAgIC8vLyBvdGhlcndpc2UgaXQgd2lsbCBjcmVhdGUgc3RvY2sgcm93IGZvciBzdG9jay5cclxuICAgIFN0b2NrVGFibGUucHJvdG90eXBlLnNldERhdGEgPSBmdW5jdGlvbiAoc3RvY2tSYXRlKSB7XHJcbiAgICAgICAgdmFyIG9TdG9ja1RhYmxlID0gdGhpcztcclxuICAgICAgICB2YXIgbHN0U3RvY2tSYXRlID0gSlNPTi5wYXJzZShzdG9ja1JhdGUpO1xyXG4gICAgICAgIC8vLyBJdCB3aWxsIGZpbmQgdW5pcXVlIHN0b2NrIGxpc3QgdG8gY3JlYXRlIG9yIHVwZGF0ZS5cclxuICAgICAgICBsc3RTdG9ja1JhdGUuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coZWxlbWVudFswXSArIGVsZW1lbnRbMV0pO1xyXG4gICAgICAgICAgICB2YXIgb0N1clN0b2NrID0gb1N0b2NrVGFibGUuc3RvY2tNYXAuZmlsdGVyKGZ1bmN0aW9uIChzdG9jaykgeyByZXR1cm4gc3RvY2submFtZSA9PSBlbGVtZW50WzBdOyB9KTtcclxuICAgICAgICAgICAgaWYgKG9DdXJTdG9jay5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgb1N0b2NrVGFibGUuc3RvY2tNYXAucHVzaChuZXcgU3RvY2tNYXAoZWxlbWVudFswXSwgZWxlbWVudFsxXSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKG9DdXJTdG9jay5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgb0N1clN0b2NrWzBdLnByaWNlID0gZWxlbWVudFsxXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb1N0b2NrVGFibGUuc3RvY2tNYXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdmFyIGJGb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG9TdG9ja1RhYmxlLnN0b2NrUm93Lmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob1N0b2NrVGFibGUuc3RvY2tNYXBbaV0ubmFtZSA9PSBvU3RvY2tUYWJsZS5zdG9ja1Jvd1tqXS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYkZvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBvU3RvY2tUYWJsZS5zdG9ja1Jvd1tqXS51cGRhdGVEYXRhKG9TdG9ja1RhYmxlLnN0b2NrTWFwW2ldLm5hbWUsIG9TdG9ja1RhYmxlLnN0b2NrTWFwW2ldLnByaWNlKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWJGb3VuZCkge1xyXG4gICAgICAgICAgICAgICAgb1N0b2NrVGFibGUuc3RvY2tSb3cucHVzaChuZXcgU3RvY2tSb3cob1N0b2NrVGFibGUuc3RvY2tNYXBbaV0ubmFtZSwgb1N0b2NrVGFibGUuc3RvY2tNYXBbaV0ucHJpY2UpKTtcclxuICAgICAgICAgICAgICAgIG9TdG9ja1RhYmxlLmVsZW1lbnQuYXBwZW5kQ2hpbGQob1N0b2NrVGFibGUuc3RvY2tSb3dbb1N0b2NrVGFibGUuc3RvY2tSb3cubGVuZ3RoIC0gMV0uZWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIFN0b2NrVGFibGU7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFN0b2NrVGFibGUgfTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RvY2t0YWJsZS9zdG9ja3RhYmxlLnRzXG4vLyBtb2R1bGUgaWQgPSA1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBTdG9ja01hcCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0b2NrTWFwKHN0ck5hbWUsIHN0clByaWNlKSB7XHJcbiAgICAgICAgdmFyIG9TdG9ja01hcCA9IHRoaXM7XHJcbiAgICAgICAgb1N0b2NrTWFwLm5hbWUgPSBzdHJOYW1lO1xyXG4gICAgICAgIG9TdG9ja01hcC5wcmljZSA9IHN0clByaWNlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFN0b2NrTWFwO1xyXG59KCkpO1xyXG5leHBvcnQgeyBTdG9ja01hcCB9O1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2FwcC9zdG9ja3RhYmxlL3N0b2NrbWFwLnRzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBTdG9ja1JvdyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFN0b2NrUm93KHN0ck5hbWUsIHN0clByaWNlKSB7XHJcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICB0aGlzLmVsbU5hbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICB0aGlzLmVsbVByaWNlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgdGhpcy5lbG1MYXN0VXBkYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgdGhpcy5sc3RIaXN0b3J5ID0gbmV3IEFycmF5KCk7XHJcbiAgICAgICAgdmFyIG9TdG9ja1JvdyA9IHRoaXM7XHJcbiAgICAgICAgb1N0b2NrUm93Lm5hbWUgPSBzdHJOYW1lO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5wcmljZSA9IHN0clByaWNlO1xyXG4gICAgICAgIG9TdG9ja1Jvdy51cGRhdGVUaW1lID0gbmV3IERhdGUoKTtcclxuICAgICAgICBvU3RvY2tSb3cuYWRkRWxlbWVudHMoKTtcclxuICAgICAgICBvU3RvY2tSb3cuc2V0SGlzdG9yeShvU3RvY2tSb3cucHJpY2UsIG9TdG9ja1Jvdy51cGRhdGVUaW1lKTtcclxuICAgICAgICBvU3RvY2tSb3cucmVuZGVyU3RvY2tEYXRhKG9TdG9ja1Jvdy5uYW1lLCBvU3RvY2tSb3cucHJpY2UsIG9TdG9ja1Jvdy5nZXRMYXN0VXBkYXRlZFRpbWUoKSk7XHJcbiAgICAgICAgb1N0b2NrUm93LndhdGNoTGFzdFVwZGF0ZSgpO1xyXG4gICAgfVxyXG4gICAgLy8vIEl0IHdpbGwgYWRkIGFsbCBIdG1sRWxlbWVudHMgdG8gcm93IGVsZW1lbnQuXHJcbiAgICBTdG9ja1Jvdy5wcm90b3R5cGUuYWRkRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIG9TdG9ja1JvdyA9IHRoaXM7XHJcbiAgICAgICAgb1N0b2NrUm93LmVsZW1lbnQuY2xhc3NOYW1lID0gXCJzdG9jay1yb3dcIjtcclxuICAgICAgICBvU3RvY2tSb3cuZWxtTmFtZS5jbGFzc05hbWUgPSBcInN0b2NrLW5hbWVcIjtcclxuICAgICAgICBvU3RvY2tSb3cuZWxtUHJpY2UuY2xhc3NOYW1lID0gXCJzdG9jay1wcmljZVwiO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5lbG1MYXN0VXBkYXRlLmNsYXNzTmFtZSA9IFwic3RvY2stbGFzdC11cGRhdGVcIjtcclxuICAgICAgICBvU3RvY2tSb3cuZWxlbWVudC5hcHBlbmRDaGlsZChvU3RvY2tSb3cuZWxtTmFtZSk7XHJcbiAgICAgICAgb1N0b2NrUm93LmVsZW1lbnQuYXBwZW5kQ2hpbGQob1N0b2NrUm93LmVsbVByaWNlKTtcclxuICAgICAgICBvU3RvY2tSb3cuZWxlbWVudC5hcHBlbmRDaGlsZChvU3RvY2tSb3cuZWxtTGFzdFVwZGF0ZSk7XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgc3RhcnQgd2F0Y2hpbmcgc3RvY2sgdXBkYXRlZCB0aW1lIHRvIGRpc3BsYXkgbGFzdCB1cGRhdGVkIHRpbWUuXHJcbiAgICBTdG9ja1Jvdy5wcm90b3R5cGUud2F0Y2hMYXN0VXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvU3RvY2tSb3cgPSB0aGlzO1xyXG4gICAgICAgIG9TdG9ja1Jvdy5sYXN0VXBkYXRlVGltZXIgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgdGltZURpZmYgPSBvU3RvY2tSb3cuZ2V0TGFzdFVwZGF0ZWRUaW1lKCk7XHJcbiAgICAgICAgICAgIHZhciB0aW1lID0gcGFyc2VJbnQoKHBhcnNlSW50KHRpbWVEaWZmKSAvIDEwMDApLnRvRml4ZWQoMCkpO1xyXG4gICAgICAgICAgICBpZiAodGltZSAvIDYwIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgb1N0b2NrUm93LmVsbUxhc3RVcGRhdGUuaW5uZXJIVE1MID0gXCJBIGZldyBTZWNvbmRzIEFnb1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRpbWUgLyAoNjAgKiA2MCkgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICBvU3RvY2tSb3cuZWxtTGFzdFVwZGF0ZS5pbm5lckhUTUwgPSBwYXJzZUludCgodGltZSAvIDYwKS50b0ZpeGVkKDApKSArIFwiIG1pbnV0ZXMgYWdvXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGltZSAvICg2MCAqIDYwICogNjApIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9TdG9ja1Jvdy5pc0RhdGVUb2RheShvU3RvY2tSb3cudXBkYXRlVGltZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBvU3RvY2tSb3cuZWxtTGFzdFVwZGF0ZS5pbm5lckhUTUwgPSBvU3RvY2tSb3cuZ2V0VGltZUZyb21EYXRlKG9TdG9ja1Jvdy51cGRhdGVUaW1lLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG9TdG9ja1Jvdy5lbG1MYXN0VXBkYXRlLmlubmVySFRNTCA9IG9TdG9ja1Jvdy5nZXREYXlNb250aEZyb21EYXRlKG9TdG9ja1Jvdy51cGRhdGVUaW1lKSArIFwiIFwiICsgb1N0b2NrUm93LmdldFRpbWVGcm9tRGF0ZShvU3RvY2tSb3cudXBkYXRlVGltZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCA2MDAwMCk7XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgcmV0dXJuIHRydWUgaWYgZ2l2ZW4gZGF0ZSBpcyB0b2RheSBlbHNlIGZhbHNlLlxyXG4gICAgU3RvY2tSb3cucHJvdG90eXBlLmlzRGF0ZVRvZGF5ID0gZnVuY3Rpb24gKG9EYXRlKSB7XHJcbiAgICAgICAgaWYgKG5ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKSA9PSBvRGF0ZS5nZXRGdWxsWWVhcigpXHJcbiAgICAgICAgICAgICYmIG5ldyBEYXRlKCkuZ2V0TW9udGgoKSA9PSBvRGF0ZS5nZXRNb250aCgpXHJcbiAgICAgICAgICAgICYmIG5ldyBEYXRlKCkuZ2V0RGF5KCkgPT0gb0RhdGUuZ2V0RGF5KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCByZXR1cm4gaW4gZm9ybWF0IG9mIDEyaHJzLzI0aHJzIGkuZS4gMDI6MDEgcG0gLyAxNDowMVxyXG4gICAgU3RvY2tSb3cucHJvdG90eXBlLmdldFRpbWVGcm9tRGF0ZSA9IGZ1bmN0aW9uIChvRGF0ZSwgYklzMTJocikge1xyXG4gICAgICAgIGlmIChiSXMxMmhyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBvRGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKS5zcGxpdChcIjpcIilbMF0gKyBcIjpcIlxyXG4gICAgICAgICAgICAgICAgKyBvRGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKS5zcGxpdChcIjpcIilbMV0gKyBcIiBcIlxyXG4gICAgICAgICAgICAgICAgKyBvRGF0ZS50b0xvY2FsZVRpbWVTdHJpbmcoKS5zcGxpdChcIjpcIilbMl0uc3BsaXQoXCIgXCIpWzFdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9EYXRlLnRvVGltZVN0cmluZygpLnNwbGl0KFwiOlwiKVswXSArIFwiOlwiXHJcbiAgICAgICAgICAgICAgICArIG9EYXRlLnRvVGltZVN0cmluZygpLnNwbGl0KFwiOlwiKVsxXTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgcmV0dXJuIGRheSBhbmQgbW9udGggaW4gZm9ybWF0IG9mIGRkIG1vbi4gaS5lIDI1IERlY1xyXG4gICAgU3RvY2tSb3cucHJvdG90eXBlLmdldERheU1vbnRoRnJvbURhdGUgPSBmdW5jdGlvbiAob0RhdGUpIHtcclxuICAgICAgICByZXR1cm4gb0RhdGUudG9EYXRlU3RyaW5nKCkuc3BsaXQoXCIgXCIpWzJdICsgXCIgXCIgKyBvRGF0ZS50b0RhdGVTdHJpbmcoKS5zcGxpdChcIiBcIilbMV07XHJcbiAgICB9O1xyXG4gICAgLy8vIEl0IHdpbGwgdXBkYXRlIHN0b2NrIHByaWNlIHRvIHZpZXcgYW5kIG1haW50YWluIGhpc3Rvcnkgb2Ygc3RvY2suXHJcbiAgICBTdG9ja1Jvdy5wcm90b3R5cGUudXBkYXRlRGF0YSA9IGZ1bmN0aW9uIChzdHJOYW1lLCBzdHJQcmljZSkge1xyXG4gICAgICAgIHZhciBvU3RvY2tSb3cgPSB0aGlzO1xyXG4gICAgICAgIC8vLyBDaG5hZ2Ugc3RvY2sgcHJpY2UgbWFudWFsbHkgdG8gY2hlY2sgaW5jcmVhc2UgYW5kIGRlY3JlYXNlIHByaWNlIG9mIHN0b2NrLlxyXG4gICAgICAgIC8vIGxldCBhOiBib29sZWFuID0gTWF0aC5yYW5kb20oKSAqIDEwID4gNTtcclxuICAgICAgICAvLyBsZXQgcHI6bnVtYmVyID0gcGFyc2VGbG9hdChwYXJzZUZsb2F0KHN0clByaWNlKS50b0ZpeGVkKDIpKTtcclxuICAgICAgICAvLyBzdHJQcmljZSA9IGEgPyAocHIgKz0gMC4xKS50b1N0cmluZygpIDogKHByIC09IDAuMSkudG9TdHJpbmcoKTtcclxuICAgICAgICBvU3RvY2tSb3cudXBkYXRlVGltZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgb1N0b2NrUm93LnByaWNlID0gc3RyUHJpY2U7XHJcbiAgICAgICAgb1N0b2NrUm93LnJlbmRlclN0b2NrRGF0YShzdHJOYW1lLCBzdHJQcmljZSwgb1N0b2NrUm93LmdldExhc3RVcGRhdGVkVGltZSgpKTtcclxuICAgICAgICBvU3RvY2tSb3cuc2V0SGlzdG9yeShvU3RvY2tSb3cucHJpY2UsIG9TdG9ja1Jvdy51cGRhdGVUaW1lKTtcclxuICAgICAgICBvU3RvY2tSb3cucHJldmlvdXNQcmljZSA9IG9TdG9ja1Jvdy5wcmljZTtcclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCBtYWtlIFVJIGNoYW5nZXMgYWNvcnJkaW5nIHRvIHByaWNlIG9mIHN0b2NrLlxyXG4gICAgU3RvY2tSb3cucHJvdG90eXBlLnJlbmRlclN0b2NrRGF0YSA9IGZ1bmN0aW9uIChzdHJOYW1lLCBzdHJQcmljZSwgc3RyTGFzdFVwZGF0ZWRUaW1lKSB7XHJcbiAgICAgICAgdmFyIG9TdG9ja1JvdyA9IHRoaXM7XHJcbiAgICAgICAgb1N0b2NrUm93LmVsbU5hbWUuaW5uZXJIVE1MID0gc3RyTmFtZTtcclxuICAgICAgICBvU3RvY2tSb3cuZWxtUHJpY2UuaW5uZXJIVE1MID0gcGFyc2VGbG9hdChzdHJQcmljZSkudG9GaXhlZCgyKTtcclxuICAgICAgICBpZiAocGFyc2VJbnQoc3RyTGFzdFVwZGF0ZWRUaW1lKSA8IDYwKSB7XHJcbiAgICAgICAgICAgIG9TdG9ja1Jvdy5lbG1MYXN0VXBkYXRlLmlubmVySFRNTCA9IFwiQSBmZXcgU2Vjb25kcyBBZ29cIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9TdG9ja1Jvdy5wcmV2aW91c1ByaWNlKSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KHN0clByaWNlKS50b0ZpeGVkKDIpICE9IHBhcnNlRmxvYXQob1N0b2NrUm93LnByZXZpb3VzUHJpY2UpLnRvRml4ZWQoMikpIHtcclxuICAgICAgICAgICAgICAgIG9TdG9ja1Jvdy5lbG1QcmljZS5jbGFzc0xpc3QucmVtb3ZlKFwic3RvY2stcHJpY2UtaW5jcmVhc2VcIik7XHJcbiAgICAgICAgICAgICAgICBvU3RvY2tSb3cuZWxtUHJpY2UuY2xhc3NMaXN0LnJlbW92ZShcInN0b2NrLXByaWNlLWRlY3JlYXNlXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KHN0clByaWNlKS50b0ZpeGVkKDIpID4gcGFyc2VGbG9hdChvU3RvY2tSb3cucHJldmlvdXNQcmljZSkudG9GaXhlZCgyKSkge1xyXG4gICAgICAgICAgICAgICAgb1N0b2NrUm93LmVsbVByaWNlLmNsYXNzTGlzdC5hZGQoXCJzdG9jay1wcmljZS1pbmNyZWFzZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChwYXJzZUZsb2F0KHN0clByaWNlKS50b0ZpeGVkKDIpIDwgcGFyc2VGbG9hdChvU3RvY2tSb3cucHJldmlvdXNQcmljZSkudG9GaXhlZCgyKSkge1xyXG4gICAgICAgICAgICAgICAgb1N0b2NrUm93LmVsbVByaWNlLmNsYXNzTGlzdC5hZGQoXCJzdG9jay1wcmljZS1kZWNyZWFzZVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICAvLy8gSXQgd2lsbCBzdG9yZSBwcmV2aW91cyBwcmljZSBvZiBzdG9jayB0byBtYWludGFpbiBoaXN0b3J5LlxyXG4gICAgU3RvY2tSb3cucHJvdG90eXBlLnNldEhpc3RvcnkgPSBmdW5jdGlvbiAoc3RyUHJpY2UsIHN0clRpbWUpIHtcclxuICAgICAgICB2YXIgb1N0b2NrUm93ID0gdGhpcztcclxuICAgICAgICBpZiAoIW9TdG9ja1Jvdy5sc3RIaXN0b3J5W29TdG9ja1Jvdy5sc3RIaXN0b3J5Lmxlbmd0aCAtIDFdXHJcbiAgICAgICAgICAgIHx8IChvU3RvY2tSb3cubHN0SGlzdG9yeVtvU3RvY2tSb3cubHN0SGlzdG9yeS5sZW5ndGggLSAxXVxyXG4gICAgICAgICAgICAgICAgJiYgb1N0b2NrUm93LmxzdEhpc3Rvcnlbb1N0b2NrUm93LmxzdEhpc3RvcnkubGVuZ3RoIC0gMV1bMF0gIT0gb1N0b2NrUm93LnByaWNlKSlcclxuICAgICAgICAgICAgb1N0b2NrUm93LmxzdEhpc3RvcnkucHVzaChbb1N0b2NrUm93LnByaWNlLCBvU3RvY2tSb3cudXBkYXRlVGltZV0pO1xyXG4gICAgfTtcclxuICAgIC8vLyBJdCB3aWxsIHJldHVybiB0aW1lIGRpZmZlcmVuY2Ugb2YgbGFzdCB1cGRhdGVkIHRpbWUgYW5kIGN1cnJlbnQgdGltZSBpbiBtaWxsaXNlY29uZHMuXHJcbiAgICBTdG9ja1Jvdy5wcm90b3R5cGUuZ2V0TGFzdFVwZGF0ZWRUaW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBvU3RvY2tSb3cgPSB0aGlzO1xyXG4gICAgICAgIHZhciB0aW1lRGlmZiA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gb1N0b2NrUm93LmxzdEhpc3Rvcnlbb1N0b2NrUm93LmxzdEhpc3RvcnkubGVuZ3RoIC0gMV1bMV0uZ2V0VGltZSgpO1xyXG4gICAgICAgIHJldHVybiB0aW1lRGlmZi50b1N0cmluZygpO1xyXG4gICAgfTtcclxuICAgIHJldHVybiBTdG9ja1JvdztcclxufSgpKTtcclxuZXhwb3J0IHsgU3RvY2tSb3cgfTtcclxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hcHAvc3RvY2tyb3cvc3RvY2tyb3cudHNcbi8vIG1vZHVsZSBpZCA9IDdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==